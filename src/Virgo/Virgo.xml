<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Virgo</name>
    </assembly>
    <members>
        <member name="T:Virgo.Aliyun.Sms.ISmsSender">
            <summary>
            发送短信的接口
            </summary>
        </member>
        <member name="M:Virgo.Aliyun.Sms.ISmsSender.SendSmsAsync(Aliyun.Acs.Dysmsapi.Model.V20170525.SendSmsRequest)">
            <summary>
            短信发送服务
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Aliyun.Sms.SmsSender">
            <summary>
            <see cref="T:Virgo.Aliyun.Sms.ISmsSender"/>实现类
            </summary>
        </member>
        <member name="T:Virgo.AspNetCore.ApiResult`1">
            <summary>
            Api返回类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Virgo.AspNetCore.ApiResult`1.Code">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Virgo.AspNetCore.ApiResult`1.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:Virgo.AspNetCore.ApiStatus">
            <summary>
            API状态
            </summary>
        </member>
        <member name="F:Virgo.AspNetCore.ApiStatus.SUCCESS">
            <summary>
            操作成功
            </summary>
        </member>
        <member name="F:Virgo.AspNetCore.ApiStatus.PARAM_ERROR">
            <summary>
            参数错误
            </summary>
        </member>
        <member name="F:Virgo.AspNetCore.ApiStatus.FAIL">
            <summary>
            操作失败
            </summary>
        </member>
        <member name="T:Virgo.AspNetCore.ApplicationController">
            <summary>
            全局控制器
            </summary>
        </member>
        <member name="M:Virgo.AspNetCore.ApplicationController.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Virgo.AspNetCore.ApplicationController.Success(System.String)">
            <summary>
            响应成功
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.AspNetCore.ApplicationController.Success``1(``0,System.String)">
            <summary>
            响应成功
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.AspNetCore.ApplicationController.UnSuccess``1(``0,System.String)">
            <summary>
            响应失败
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.AspNetCore.ApplicationController.UnSuccess(System.String)">
            <summary>
            响应失败
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.AspNetCore.ApiVersionExtensions">
            <summary>
            ApiVersion拓展
            </summary>
            <remarks>Install-Package Microsoft.AspNetCore.Mvc.Versioning</remarks>
            <remarks>Install-Package Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer</remarks>
        </member>
        <member name="M:Virgo.AspNetCore.ApiVersionExtensions.AddApiVersion(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加 API 版本控制扩展方法
            </summary>
            <param name="services">生命周期中注入的服务集合 <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
        </member>
        <member name="T:Virgo.AspNetCore.HttpContext2Extensions">
            <summary>
            依赖注入<see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection"/>容器扩展方法
            </summary>
        </member>
        <member name="M:Virgo.AspNetCore.HttpContext2Extensions.UseStaticHttpContext(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注入HttpContext静态对象，方便在任意地方获取HttpContext，app.UseStaticHttpContext();
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.AspNetCore.Job.VirgoBackgroundService">
            <summary>
            重写<see cref="T:Microsoft.Extensions.Hosting.IHostedService"/>
            </summary>
        </member>
        <member name="F:Virgo.AspNetCore.Job.VirgoBackgroundService._stoppingCts">
            <summary>
            取消令牌
            </summary>
        </member>
        <member name="F:Virgo.AspNetCore.Job.VirgoBackgroundService._timer">
            <summary>
            定时Timer实例
            </summary>
        </member>
        <member name="M:Virgo.AspNetCore.Job.VirgoBackgroundService.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            执行
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.AspNetCore.Job.VirgoBackgroundService.DoWork(System.Object)">
            <summary>
            需要执行的方法
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:Virgo.AspNetCore.Job.VirgoBackgroundService.Interval">
            <summary>
            间隔时间，空则值执行一次
            </summary>
        </member>
        <member name="M:Virgo.AspNetCore.Job.VirgoBackgroundService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            开始时执行的操作
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.AspNetCore.Job.VirgoBackgroundService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            结束时执行的操作
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.AspNetCore.Job.VirgoBackgroundService.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Virgo.AspNetCore.RemoveVersionFromParameter">
            <summary>
            取消 API 文档需要输入版本信息
            </summary>
        </member>
        <member name="T:Virgo.AspNetCore.SwaggerExtensions">
            <summary>
            Swagger拓展类
            </summary>
            <remarks>Swashbuckle.AspNetCore</remarks>
        </member>
        <member name="M:Virgo.AspNetCore.SwaggerExtensions.AddSwaggerStep(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.List{System.String})">
            <summary>
            添加Swagger服务
            </summary>
            <param name="services"></param>
            <param name="xmlPaths"></param>
        </member>
        <member name="M:Virgo.AspNetCore.SwaggerExtensions.UseSwaggerWithUI(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            添加Swagger中间件和SwaggerUI
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:Virgo.AspNetCore.ConfigurationHelper">
            <summary>
            获取配置辅助类
            </summary>
        </member>
        <member name="M:Virgo.AspNetCore.ConfigurationHelper.GetIConfigurationRoot(System.String)">
            <summary>
            获取<see cref="T:Microsoft.Extensions.Configuration.IConfigurationRoot"/>实例
            </summary>
            <param name="basthPath"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.AspNetCore.ConfigurationHelper.GetIConfigurationRoot(System.String,System.String)">
            <summary>
            获取指定环境的<see cref="T:Microsoft.Extensions.Configuration.IConfigurationRoot"/>实例
            </summary>
            <param name="environment"></param>
            <param name="basthPath"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.AspNetCore.ConfigurationHelper.GetApplicationConfiguration``1(Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            获取指定节点实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="iConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.AspNetCore.ConfigurationHelper.GetConfigurationSection``1(Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            获取指定节点实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="iConfig"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Net.HttpContext2">
            <summary>
            实现类似于.NET Framework中的HttpContext静态对象，使用前需要在Startup中注入，ConfigureServices方法中：services.AddHttpContextAccessor();，Configure方法中：app.UseStaticHttpContext();
            </summary>
        </member>
        <member name="P:Virgo.Net.HttpContext2.Current">
            <summary>
            获取当前禽求上下文，使用前需要在Startup中注入，ConfigureServices方法中：services.AddStaticHttpContext();，Configure方法中：app.UseStaticHttpContext();
            </summary>
        </member>
        <member name="T:Virgo.Net.Http.HttpClientHelper">
            <summary>
            <see cref="T:System.Net.Http.HttpClient"/>辅助类
            </summary>
        </member>
        <member name="M:Virgo.Net.Http.HttpClientHelper.GetAsync(System.String,System.Object,System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            通过HttpClient发起Get请求
            <para>键值对参数拼接在url上，后台使用[FromQuery]</para>
            </summary>
            <param name="url">请求地址</param>
            <param name="data">请求参数</param>
            <param name="action">Http请求头设置</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Virgo.Net.Http.HttpClientHelper.PostAsync(System.String,System.Net.Http.HttpContent,System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            通过HttpClient发起Post请求
            <para><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>区别：</para>
            <para><see cref="T:System.Net.Http.MultipartFormDataContent"/>、<see cref="T:System.Net.Http.FormUrlEncodedContent"/>、<see cref="T:System.Net.Http.StreamContent"/>、<see cref="T:System.Net.Http.ByteArrayContent"/>后台使用[FromForm]接受参数</para>
            <para><see cref="T:System.Net.Http.StringContent"/>后台使用[FromBody]接受参数</para>
            </summary>
            <param name="url">请求地址</param>
            <param name="content">请求参数</param>
            <param name="action">Http请求头设置</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Virgo.Net.Http.HttpClientHelper.PutAsync(System.String,System.Net.Http.HttpContent,System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            通过HttpClient发起Put请求
            <para><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>区别：</para>
            <para><see cref="T:System.Net.Http.MultipartFormDataContent"/>、<see cref="T:System.Net.Http.FormUrlEncodedContent"/>、<see cref="T:System.Net.Http.StreamContent"/>、<see cref="T:System.Net.Http.ByteArrayContent"/>后台使用[FromForm]接受参数</para>
            <para><see cref="T:System.Net.Http.StringContent"/>后台使用[FromBody]接受参数</para>
            </summary>
            <param name="url">请求地址</param>
            <param name="content">请求参数</param>
            <param name="action">Http请求头设置</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Virgo.Net.Http.HttpClientHelper.DeleteAsync(System.String,System.Object,System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            通过HttpClient发起Delete请求
            <para>键值对参数拼接在url上，后台使用[FromQuery]</para>
            </summary>
            <param name="url">请求地址</param>
            <param name="data">请求参数</param>
            <param name="action">Http请求头设置</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Virgo.Net.Http.HttpClientHelper.SendAsync(System.String,System.Net.Http.HttpMethod,System.Net.Http.HttpContent,System.Action{System.Net.Http.Headers.HttpRequestHeaders})">
            <summary>
            将HTTP请求作为异步操作发送
            </summary>
            <param name="url">请求地址</param>
            <param name="method">请求方法</param>
            <param name="content">请求内容</param>
            <param name="action">Http请求头设置</param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Net.Http.HttpContentHelper.ToStreamContent(System.Object)">
            <summary>
            Object转换为StreamContent
            </summary>
            <param name="data">请求参数</param>
            <returns>StreamContent</returns>
        </member>
        <member name="M:Virgo.Net.Http.HttpContentHelper.ToStringContent(System.Object)">
            <summary>
            Object转换为StringContent
            </summary>
            <param name="data">请求参数</param>
            <returns>StringContent</returns>
        </member>
        <member name="M:Virgo.Net.Http.HttpContentHelper.ToMultipartFormDataContent(Microsoft.AspNetCore.Http.IFormFileCollection,System.Object)">
            <summary>
            将接受的文件和参数转换为MultipartFormDataContent
            </summary>
            <param name="data"></param>
            <returns>MultipartFormDataContent</returns>
        </member>
        <member name="M:Virgo.Net.Http.HttpContentHelper.ToFormUrlEncodedContent(System.Object)">
            <summary>
            Object转换为FormUrlEncodedContent
            </summary>
            <param name="data">请求参数</param>
            <returns>FormUrlEncodedContent</returns>
        </member>
        <member name="M:Virgo.Net.Http.HttpContentHelper.ToByteArrayContent(System.Object)">
            <summary>
            Object转换为ByteArrayContent
            </summary>
            <param name="data">请求参数</param>
            <returns>ByteArrayContent</returns>
        </member>
        <member name="M:Virgo.Net.Http.HttpContentHelper.ToBytes(System.Object)">
            <summary>
            Object转换为Bytes
            </summary>
            <param name="data">请求参数</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:Virgo.Net.Http.HttpContentHelper.BuildParam(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Text.Encoding)">
            <summary>
            将键值对参数集合拼接为Url字符串
            </summary>
            <param name="paramArray">键值对集合</param>
            <param name="encode">转码类型</param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Net.Http.HttpContentHelper.ToKeyValuePair(System.Object)">
            <summary>
            Object转换为KeyValuePair
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Net.Http.HttpContentHelper.Encode(System.String,System.Text.Encoding)">
            <summary>
            Url编码
            </summary>
            <param name="content">内容</param>
            <param name="encode">编码类型</param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Net.Http.HttpContentHelper.Decode(System.String,System.Text.Encoding)">
            <summary>
            Url解码
            </summary>
            <param name="content">内容</param>
            <param name="encode">编码类型</param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Net.Http.WebRequestHelper">
            <summary>
            <see cref="T:System.Net.WebRequest"/>辅助类
            </summary>
        </member>
        <member name="M:Virgo.Net.Http.WebRequestHelper.GetAsync(System.String,System.Object)">
            <summary>
            通过WebRequest发起Get请求
            </summary>
            <param name="url">请求地址</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Virgo.Net.Http.WebRequestHelper.PostAsync(System.String,System.Object)">
            <summary>
            通过WebRequest发起Post请求
            </summary>
            <param name="url">请求地址</param>
            <param name="data">请求参数</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="T:Virgo.Net.Http.WebSocketsHelper">
            <summary>
            <see cref="T:System.Net.WebSockets.WebSocket"/>帮助类
            </summary>
        </member>
        <member name="F:Virgo.Net.Http.WebSocketsHelper.Sockets">
            <summary>
            客户端连接字典
            </summary>
        </member>
        <member name="M:Virgo.Net.Http.WebSocketsHelper.AddClient(System.String,System.Net.WebSockets.WebSocket)">
            <summary>
            添加客户端
            </summary>
            <param name="userId">用户ID</param>
            <param name="webSocket">WebSocket客户端</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Virgo.Net.Http.WebSocketsHelper.RemoveClient(System.String)">
            <summary>
            移除客户端
            </summary>
            <param name="userId">用户ID</param>
            <returns>WebSocket客户端</returns>
        </member>
        <member name="M:Virgo.Net.Http.WebSocketsHelper.GetClient(System.String)">
            <summary>
            获取客户端
            </summary>
            <param name="userId">用户ID</param>
            <returns>WebSocket客户端</returns>
        </member>
        <member name="M:Virgo.Net.Http.WebSocketsHelper.All">
            <summary>
            获取所有客户端
            </summary>
            <returns></returns>
        </member>
        <member name="T:Virgo.Net.Mime.ContentType">
            <summary>
            默认MIME映射器，可以根据文件扩展名获取标准内容类型。
            </summary>
        </member>
        <member name="F:Virgo.Net.Mime.ContentType.DefaultMime">
            <summary>
            默认Mime  - 如果没有找到任何其他映射则作为默认的Mime-Type
            </summary>
        </member>
        <member name="T:Virgo.Net.Mime.IMimeMapper">
            <summary>
            Mime
            </summary>
        </member>
        <member name="M:Virgo.Net.Mime.IMimeMapper.Extend(Virgo.Net.Mime.MimeMappingItem[])">
            <summary>
            扩展Mime
            </summary>
            <param name="extensions"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Net.Mime.IMimeMapper.GetMimeFromExtension(System.String)">
            <summary>
            根据扩展名获取mime type
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Net.Mime.IMimeMapper.GetMimeFromPath(System.String)">
            <summary>
            根据路径获取Mime Type
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Net.Mime.MimeMapper">
            <summary>
            默认MIME映射器，可以根据文件扩展名获取标准内容类型。
            </summary>
        </member>
        <member name="F:Virgo.Net.Mime.MimeMapper.DefaultMime">
            <summary>
            默认Mime  - 如果没有找到任何其他映射则作为默认的Mime-Type
            </summary>
        </member>
        <member name="F:Virgo.Net.Mime.MimeMapper._pathExtensionPattern">
            <summary>
            在文件路径中搜索文件扩展名的默认正则表达式
            </summary>
        </member>
        <member name="P:Virgo.Net.Mime.MimeMapper.MimeTypes">
            <summary>
            Mime类型的默认字典(Content types)
            </summary>
        </member>
        <member name="M:Virgo.Net.Mime.MimeMapper.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Virgo.Net.Mime.MimeMapper.#ctor(Virgo.Net.Mime.MimeMappingItem[])">
            <summary>
            
            </summary>
            <param name="extensions"></param>
        </member>
        <member name="M:Virgo.Net.Mime.MimeMapper.Extend(Virgo.Net.Mime.MimeMappingItem[])">
            <summary>
            扩展mime映射规则的标准列表。扩展的具有更高的优先级 - 如果扩展具有与标准项相同的扩展名，则会覆盖默认的mime
            </summary>
            <param name="extensions"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Net.Mime.MimeMapper.GetMimeFromExtension(System.String)">
            <summary>
            返回特定文件扩展名的Content-Type，如果未找到任何对应关系，则返回默认值
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Net.Mime.MimeMapper.GetMimeFromPath(System.String)">
            <summary>
            根据路径获取MimeType
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Net.Mime.MimeMapper.GetExtension(System.String)">
            <summary>
            获取扩展名
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Net.Mime.MimeMappingItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Virgo.Net.Mime.MimeMappingItem.Extension">
            <summary>
            扩展名
            </summary>
        </member>
        <member name="P:Virgo.Net.Mime.MimeMappingItem.MimeType">
            <summary>
            MimeType
            </summary>
        </member>
        <member name="T:Virgo.Cache.CacheBase">
            <summary>
            缓存的基类
            它用于简化实现<see cref ="T:Virgo.Cache.ICache"/>
            </summary>  
        </member>
        <member name="M:Virgo.Cache.CacheBase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Virgo.Cache.CacheExtensions">
            <summary>
            <see cref ="T:Virgo.Cache.ICache"/>的扩展方法
            </summary>
        </member>
        <member name="T:Virgo.Cache.CacheManagerBase">
            <summary>
            缓存管理器的基类
            </summary>
        </member>
        <member name="M:Virgo.Cache.CacheManagerBase.#ctor(Virgo.DependencyInjection.IIocManager,Virgo.Cache.Configuration.ICachingConfiguration)">
            <summary>
            构造函数
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Virgo.Cache.CacheManagerBase.CreateCacheImplementation(System.String)">
            <summary>
            用于创建实际的缓存实现
            </summary>
            <param name="name">缓存的名称</param>
            <returns>缓存对象</returns>
        </member>
        <member name="T:Virgo.Cache.CacheManagerExtensions">
            <summary>
            <see cref ="T:Virgo.Cache.ICacheManager"/>的扩展方法
            </summary>
        </member>
        <member name="T:Virgo.Cache.Configuration.ICacheConfigurator">
            <summary>
            已注册的缓存配置程序。
            </summary>
        </member>
        <member name="P:Virgo.Cache.Configuration.ICacheConfigurator.CacheName">
            <summary>
            缓存的名称。
            如果此配置程序配置所有缓存，则它将为null。
            </summary>
        </member>
        <member name="P:Virgo.Cache.Configuration.ICacheConfigurator.InitAction">
            <summary>
            配置动作。 在创建缓存之后调用。
            </summary>
        </member>
        <member name="T:Virgo.Cache.Configuration.ICachingConfiguration">
            <summary>
            用于配置缓存系统
            </summary>
        </member>
        <member name="P:Virgo.Cache.Configuration.ICachingConfiguration.Configurators">
            <summary>
            所有已注册配置程序的列表。
            </summary>
        </member>
        <member name="M:Virgo.Cache.Configuration.ICachingConfiguration.ConfigureAll(System.Action{Virgo.Cache.ICache})">
            <summary>
            用于配置所有缓存。
            </summary>
            <param name="initAction">
            配置缓存的操作
            创建后，每个缓存都会调用此操作。
            </param>
        </member>
        <member name="M:Virgo.Cache.Configuration.ICachingConfiguration.Configure(System.String,System.Action{Virgo.Cache.ICache})">
            <summary>
            用于配置特定缓存。 
            </summary>
            <param name="cacheName">Cache name</param>
            <param name="initAction">
            配置缓存的操作
            在创建缓存后立即调用此操作
            </param>
        </member>
        <member name="T:Virgo.Cache.ICache">
            <summary>
            定义可以按键存储和获取项目的缓存
            </summary>
        </member>
        <member name="P:Virgo.Cache.ICache.Name">
            <summary>
            唯一的缓存名称
            </summary>
        </member>
        <member name="P:Virgo.Cache.ICache.DefaultSlidingExpireTime">
            <summary>
            缓存项的默认滑动过期时间。
            默认值：60分钟（1小时）
            可以通过配置更改
            </summary>
        </member>
        <member name="P:Virgo.Cache.ICache.DefaultAbsoluteExpireTime">
            <summary>
            缓存项的默认绝对过期时间
            默认值：空（未使用）
            </summary>
        </member>
        <member name="M:Virgo.Cache.ICache.Get(System.String,System.Func{System.String,System.Object})">
            <summary>
            从缓存中获取项目
            此方法隐藏缓存提供程序失败（并记录它们），如果缓存提供程序失败，则使用工厂方法获取对象
            </summary>
            <param name="key">键</param>
            <param name="factory">如果不存在，则创建缓存项的工厂方法</param>
            <returns>缓存的项目</returns>
        </member>
        <member name="M:Virgo.Cache.ICache.Get(System.String[],System.Func{System.String,System.Object})">
            <summary>
            从缓存中获取项目
            此方法隐藏缓存提供程序失败（并记录它们），如果缓存提供程序失败，则使用工厂方法获取对象
            </summary>
            <param name="keys">键</param>
            <param name="factory">如果不存在，则创建缓存项的工厂方法</param>
            <returns>缓存的项目</returns>
        </member>
        <member name="M:Virgo.Cache.ICache.GetAsync(System.String,System.Func{System.String,System.Threading.Tasks.Task{System.Object}})">
            <summary>
            从缓存中获取一个项目
            此方法隐藏缓存提供程序失败（并记录它们），如果缓存提供程序失败，则使用工厂方法获取对象
            </summary>
            <param name="key">键</param>
            <param name="factory">如果不存在，则创建缓存项的工厂方法</param>
            <returns>缓存的项目</returns>
        </member>
        <member name="M:Virgo.Cache.ICache.GetAsync(System.String[],System.Func{System.String,System.Threading.Tasks.Task{System.Object}})">
            <summary>
            从缓存中获取一个项目
            此方法隐藏缓存提供程序失败（并记录它们），如果缓存提供程序失败，则使用工厂方法获取对象
            </summary>
            <param name="keys">键</param>
            <param name="factory">如果不存在，则创建缓存项的工厂方法</param>
            <returns>缓存的项目</returns>
        </member>
        <member name="M:Virgo.Cache.ICache.GetOrDefault(System.String)">
            <summary>
            从缓存中获取项目，如果未找到，则返回null
            </summary>
            <param name="key">键</param>
            <returns>缓存项目，如果未找到则为null</returns>
        </member>
        <member name="M:Virgo.Cache.ICache.GetOrDefault(System.String[])">
            <summary>
            从缓存中获取项目。 对于未找到的每个键，返回空值
            </summary>
            <param name="keys">键</param>
            <returns>缓存的项目</returns>
        </member>
        <member name="M:Virgo.Cache.ICache.GetOrDefaultAsync(System.String)">
            <summary>
            从缓存中获取项目，如果未找到，则返回null
            </summary>
            <param name="key">键</param>
            <returns>缓存项目，如果未找到则为null</returns>
        </member>
        <member name="M:Virgo.Cache.ICache.GetOrDefaultAsync(System.String[])">
            <summary>
            从缓存中获取项目。 对于未找到的每个键，返回空值
            </summary>
            <param name="keys">键</param>
            <returns>缓存的项目</returns>
        </member>
        <member name="M:Virgo.Cache.ICache.Set(System.String,System.Object,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            通过键保存/覆盖缓存中的项目
            最多使用一个过期时间 (<paramref name="slidingExpireTime"/> 或 <paramref name="absoluteExpireTime"/>)。
            如果没有指定它们，那么<see cref="P:Virgo.Cache.ICache.DefaultAbsoluteExpireTime"/> 如果不为null将被使用。
            否则, <see cref="P:Virgo.Cache.ICache.DefaultSlidingExpireTime"/>将会被使用。
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="slidingExpireTime">滑动到期时间</param>
            <param name="absoluteExpireTime">绝对到期时间</param>
        </member>
        <member name="M:Virgo.Cache.ICache.Set(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            通过键保存/覆盖缓存中的项目
            最多使用一个过期时间 (<paramref name="slidingExpireTime"/> 或 <paramref name="absoluteExpireTime"/>)。
            如果没有指定它们，那么<see cref="P:Virgo.Cache.ICache.DefaultAbsoluteExpireTime"/> 如果不为null将被使用。
            否则, <see cref="P:Virgo.Cache.ICache.DefaultSlidingExpireTime"/>将会被使用。
            </summary>
            <param name="pairs">键值对</param>
            <param name="slidingExpireTime">滑动到期时间</param>
            <param name="absoluteExpireTime">绝对到期时间</param>
        </member>
        <member name="M:Virgo.Cache.ICache.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            通过键保存/覆盖缓存中的项目
            最多使用一个过期时间 (<paramref name="slidingExpireTime"/> 或 <paramref name="absoluteExpireTime"/>)。
            如果没有指定它们，那么<see cref="P:Virgo.Cache.ICache.DefaultAbsoluteExpireTime"/> 如果不为null将被使用。 
            否则, <see cref="P:Virgo.Cache.ICache.DefaultSlidingExpireTime"/>将会被使用。
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="slidingExpireTime">滑动到期时间</param>
            <param name="absoluteExpireTime">绝对到期时间</param>
        </member>
        <member name="M:Virgo.Cache.ICache.SetAsync(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            通过键保存/覆盖缓存中的项目
            最多使用一个过期时间 (<paramref name="slidingExpireTime"/> 或 <paramref name="absoluteExpireTime"/>)。
            如果没有指定它们，那么<see cref="P:Virgo.Cache.ICache.DefaultAbsoluteExpireTime"/> 如果不为null将被使用。 
            否则, <see cref="P:Virgo.Cache.ICache.DefaultSlidingExpireTime"/>将会被使用。
            </summary>
            <param name="pairs">键值对</param>
            <param name="slidingExpireTime">滑动到期时间</param>
            <param name="absoluteExpireTime">绝对到期时间</param>
        </member>
        <member name="M:Virgo.Cache.ICache.Remove(System.String)">
            <summary>
            通过它的键删除缓存项（如果缓存中不存在给定键则不执行任何操作）。
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:Virgo.Cache.ICache.Remove(System.String[])">
            <summary>
            按键删除缓存项。
            </summary>
            <param name="keys">Keys</param>
        </member>
        <member name="M:Virgo.Cache.ICache.RemoveAsync(System.String)">
            <summary>
            通过它的键删除缓存项（如果缓存中不存在给定键则不执行任何操作）。
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:Virgo.Cache.ICache.RemoveAsync(System.String[])">
            <summary>
            按键删除缓存项。
            </summary>
            <param name="keys">Keys</param>
        </member>
        <member name="M:Virgo.Cache.ICache.Clear">
            <summary>
            清除此缓存中的所有项目。
            </summary>
        </member>
        <member name="M:Virgo.Cache.ICache.ClearAsync">
            <summary>
            清除此缓存中的所有项目。
            </summary>
        </member>
        <member name="T:Virgo.Cache.ICacheManager">
            <summary>
            <see cref="T:Virgo.Cache.ICache"/> 对象的上层容器
            缓存管理器应该作为Singleton工作，并跟踪和管理<see cref ="T:Virgo.Cache.ICache"/>对象
            </summary>
        </member>
        <member name="M:Virgo.Cache.ICacheManager.GetAllCaches">
            <summary>
            获取所有缓存
            </summary>
            <returns>缓存列表</returns>
        </member>
        <member name="M:Virgo.Cache.ICacheManager.GetCache(System.String)">
            <summary>
            获取<see cref ="T:Virgo.Cache.ICache"/>实例
            如果缓存尚不存在，它可能会创建缓存
            </summary>
            <param name="name">
            缓存的唯一且区分大小写的名称
            </param>
            <returns>缓存引用</returns>
        </member>
        <member name="T:Virgo.Cache.ITypedCache`2">
            <summary>
            以类型化方式使用缓存的接口
            使用<see cref ="!:CacheExtensions.AsTyped &lt;TKey，TValue&gt;"/>方法将<see cref ="T:Virgo.Cache.ICache"/>转换为此接口
            </summary>
            <typeparam name="TKey">缓存项的键类型</typeparam>
            <typeparam name="TValue">缓存项的值类型</typeparam>
        </member>
        <member name="P:Virgo.Cache.ITypedCache`2.Name">
            <summary>
            缓存的唯一名称
            </summary>
        </member>
        <member name="P:Virgo.Cache.ITypedCache`2.DefaultSlidingExpireTime">
            <summary>
            缓存项的默认滑动到期时间
            </summary>
        </member>
        <member name="P:Virgo.Cache.ITypedCache`2.InternalCache">
            <summary>
            获取内部缓存
            </summary>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.Get(`0,System.Func{`0,`1})">
            <summary>
            从缓存中获取一个项目
            </summary>
            <param name="key">键</param>
            <param name="factory">如果不存在，则创建缓存项的工厂方法</param>
            <returns>缓存的项目</returns>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.Get(`0[],System.Func{`0,`1})">
            <summary>
            从缓存中获取多个项目
            </summary>
            <param name="keys">键</param>
            <param name="factory">如果不存在，则创建缓存项的工厂方法</param>
            <returns>缓存的项目</returns>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.GetAsync(`0,System.Func{`0,System.Threading.Tasks.Task{`1}})">
            <summary>
            从缓存中获取一个项目
            </summary>
            <param name="key">键</param>
            <param name="factory">如果不存在，则创建缓存项的工厂方法</param>
            <returns>缓存的项目</returns>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.GetAsync(`0[],System.Func{`0,System.Threading.Tasks.Task{`1}})">
            <summary>
            从缓存中获取多个项目
            </summary>
            <param name="keys">键</param>
            <param name="factory">如果不存在，则创建缓存项的工厂方法</param>
            <returns>缓存的项目</returns>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.GetOrDefault(`0)">
            <summary>
            从缓存中获取项目，如果未找到，则返回null
            </summary>
            <param name="key">键</param>
            <returns>缓存项目，如果未找到则为null</returns>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.GetOrDefault(`0[])">
            <summary>
            从缓存中获取项目。 对于未找到的每个键，返回空值。
            </summary>
            <param name="keys">键</param>
            <returns>缓存的项目</returns>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.GetOrDefaultAsync(`0)">
            <summary>
            从缓存中获取项目，如果未找到，则返回null
            </summary>
            <param name="key">键</param>
            <returns>缓存项目，如果未找到则为null</returns>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.GetOrDefaultAsync(`0[])">
            <summary>
            从缓存中获取项目。 对于未找到的每个键，返回空值。
            </summary>
            <param name="keys">键</param>
            <returns>缓存的项目</returns>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.Set(`0,`1,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            通过键保存/覆盖缓存中的项目。
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="slidingExpireTime">滑动到期时间</param>
            <param name="absoluteExpireTime">绝对到期时间</param>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.Set(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            按对保存/覆盖缓存中的项目
            </summary>
            <param name="pairs">键值对</param>
            <param name="slidingExpireTime">滑动到期时间</param>
            <param name="absoluteExpireTime">绝对到期时间</param>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.SetAsync(`0,`1,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            通过键保存/覆盖缓存中的项目。
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="slidingExpireTime">滑动到期时间</param>
            <param name="absoluteExpireTime">绝对到期时间</param>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.SetAsync(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            按对保存/覆盖缓存中的项目
            </summary>
            <param name="pairs">键值对</param>
            <param name="slidingExpireTime">滑动到期时间</param>
            <param name="absoluteExpireTime">绝对到期时间</param>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.Remove(`0)">
            <summary>
            通过它的键删除缓存项（如果缓存中不存在给定密钥则不执行任何操作）
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.Remove(`0[])">
            <summary>
            按键删除缓存项
            </summary>
            <param name="keys">键</param>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.RemoveAsync(`0)">
            <summary>
            通过它的键删除缓存项（如果缓存中不存在给定密钥则不执行任何操作）
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.RemoveAsync(`0[])">
            <summary>
            按键删除缓存项
            </summary>
            <param name="keys">键</param>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.Clear">
            <summary>
            清除此缓存中的所有项目
            </summary>
        </member>
        <member name="M:Virgo.Cache.ITypedCache`2.ClearAsync">
            <summary>
            清除此缓存中的所有项目
            </summary>
        </member>
        <member name="T:Virgo.Cache.Memory.VirgoMemoryCache">
            <summary>
            实现<see cref ="T:Virgo.Cache.ICache"/>以使用<see cref ="T:Microsoft.Extensions.Caching.Memory.MemoryCache"/>
            </summary>
        </member>
        <member name="M:Virgo.Cache.Memory.VirgoMemoryCache.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">缓存的唯一名称</param>
        </member>
        <member name="T:Virgo.Cache.Memory.VirgoMemoryCacheManager">
            <summary>
            实现<see cref ="T:Virgo.Cache.ICacheManager"/>以使用MemoryCache
            </summary>
        </member>
        <member name="M:Virgo.Cache.Memory.VirgoMemoryCacheManager.#ctor(Virgo.DependencyInjection.IIocManager,Virgo.Cache.Configuration.ICachingConfiguration)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Virgo.Cache.TypedCacheExtensions">
            <summary>
            <see cref ="!:ITypedCache &lt;TKey，TValue&gt;"/>的扩展方法
            </summary>
        </member>
        <member name="T:Virgo.Cache.TypedCacheWrapper`2">
            <summary>
            实现<see cref ="!:ITypedCache &lt;TKey，TValue&gt;"/>以包装<see cref ="T:Virgo.Cache.ICache"/>
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Virgo.Cache.TypedCacheWrapper`2.#ctor(Virgo.Cache.ICache)">
            <summary>
            创建一个新的<see cref ="!:TypedCacheWrapper &lt;TKey，TValue&gt;"/>对象
            </summary>
            <param name="internalCache">实际的内部缓存</param>
        </member>
        <member name="T:Virgo.Data.MsSqlHelper">
            <summary>
            MsSql工具类
            </summary>
        </member>
        <member name="M:Virgo.Data.MsSqlHelper.BulkCopy(System.Data.SqlClient.SqlConnection,System.Data.DataTable)">
            <summary>
            批量插入(同步方法)
            </summary>
            <param name="sqlConnection"></param>
            <param name="dataTable"></param>
        </member>
        <member name="M:Virgo.Data.MsSqlHelper.BulkCopyAsync(System.Data.SqlClient.SqlConnection,System.Data.DataTable)">
            <summary>
            批量插入(异步方法)
            </summary>
            <param name="sqlConnection"></param>
            <param name="dataTable"></param>
        </member>
        <member name="T:Virgo.Data.MySqlHelper">
            <summary>
            MySql工具类
            </summary>
        </member>
        <member name="M:Virgo.Data.MySqlHelper.BulkLoad(MySql.Data.MySqlClient.MySqlConnection,System.Data.DataTable)">
            <summary>
            批量导入(同步方法)
            </summary>
            <param name="_mySqlConnection"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Data.MySqlHelper.BulkLoadAsync(MySql.Data.MySqlClient.MySqlConnection,System.Data.DataTable)">
            <summary>
            批量导入(异步方法)
            </summary>
            <param name="_mySqlConnection"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.DependencyInjection.AutofacInterceptionExtensions">
            <summary>
            Autofac拦截器拓展
            </summary>
        </member>
        <member name="M:Virgo.DependencyInjection.AutofacInterceptionExtensions.RegisterInterceptorBy``1(Autofac.ContainerBuilder)">
            <summary>
            注册拦截器
            </summary>
            <typeparam name="TInterceptor"></typeparam>
            <param name="builder"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.DependencyInjection.DependencyInjectionExtensions">
            <summary>
            .NET Core 依赖注入拓展
            </summary>
        </member>
        <member name="M:Virgo.DependencyInjection.DependencyInjectionExtensions.RegisterAssembly(Autofac.ContainerBuilder,System.Reflection.Assembly[])">
            <summary>
            注册程序集组件
            </summary>
            <param name="builder"></param>
            <param name="assemblies"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.DependencyInjection.DependencyInjectionExtensions.RegisterDependenciesByAssembly``1(Autofac.ContainerBuilder,System.Reflection.Assembly)">
            <summary>
            注册程序集
            </summary>
            <param name="builder"></param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Virgo.DependencyInjection.DependencyInjectionExtensions.UseIocManager(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注册IocManager
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:Virgo.DependencyInjection.IIocManager">
            <summary>
            管理器接口
            </summary>
        </member>
        <member name="T:Virgo.DependencyInjection.ILifetime">
            <summary>
              标记依赖项生命周期的接口
              <see cref="T:Virgo.DependencyInjection.ILifetimeScopeDependency" />,
              <see cref="T:Virgo.DependencyInjection.ITransientDependency" />,
              <see cref="T:Virgo.DependencyInjection.ISingletonDependency" />
            </summary>
        </member>
        <member name="T:Virgo.DependencyInjection.ILifetimeScopeDependency">
            <summary>
            确定接口或类的生存期
            作用域模式，服务在每次请求时被创建，整个请求过程中都贯穿使用这个创建的服务。
            </summary>
        </member>
        <member name="T:Virgo.DependencyInjection.IocManager">
            <summary>
            <see cref="T:Virgo.DependencyInjection.IIocManager"/>管理器实现类
            </summary>
        </member>
        <member name="P:Virgo.DependencyInjection.IocManager.AutofacContainer">
            <summary>
            Autofac容器
            </summary>
        </member>
        <member name="T:Virgo.DependencyInjection.ISingletonDependency">
            <summary>
            确定接口或类的生存期
            单例模式，所有服务请求都将会返回同一个实例。
            </summary>
        </member>
        <member name="T:Virgo.DependencyInjection.ITransientDependency">
            <summary>
            确定接口或类的生存期
            瞬态模式，每次请求时都会创建。
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.AggregateRoot`1">
            <summary>
            聚合根实现类
            </summary>
            <typeparam name="TPrimaryKey">实体主键类型</typeparam>
        </member>
        <member name="T:Virgo.Domain.Entities.AggregateRoot">
            <summary>
            聚合跟实现类-主键为String类型
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.AuditedAggregateRoot`1">
            <summary>
            抽象实现<see cref ="T:Virgo.Domain.Entities.Auditing.IAudited"/>的聚合根
            </summary>
            <typeparam name="TPrimaryKey">主键类型</typeparam>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.AuditedAggregateRoot`1.LastModificationTime">
            <summary>
            此实体的上次修改日期
            </summary>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.AuditedAggregateRoot`1.LastModifierUserId">
            <summary>
            上次修改此实体的用户
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.AuditedAggregateRoot">
            <summary>
            抽象实现<see cref ="T:Virgo.Domain.Entities.Auditing.IAudited"/>的聚合根-主键为String类型
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.AuditedEntity`1">
            <summary>
            <see cref="T:Virgo.Domain.Entities.Auditing.IAudited"/>实现类
            </summary>
            <typeparam name="TPrimaryKey">主键类型</typeparam>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.AuditedEntity`1.LastModificationTime">
            <summary>
            最后修改时间
            </summary>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.AuditedEntity`1.LastModifierUserId">
            <summary>
            最后修改用户
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.AuditedEntity">
            <summary>
             <see cref="T:Virgo.Domain.Entities.Auditing.IAudited"/>实现类-主键为String类型
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.CreationAuditedAggregateRoot`1">
            <summary>
            抽象实现<see cref ="T:Virgo.Domain.Entities.Auditing.ICreationAudited"/>的聚合根
            </summary>
            <typeparam name="TPrimaryKey">主键类型</typeparam>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.CreationAuditedAggregateRoot`1.CreationTime">
            <summary>
            该实体的创建时间
            </summary>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.CreationAuditedAggregateRoot`1.CreatorUserId">
            <summary>
            这个实体的创造者
            </summary>
        </member>
        <member name="M:Virgo.Domain.Entities.Auditing.CreationAuditedAggregateRoot`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.CreationAuditedAggregateRoot">
            <summary>
            抽象实现<see cref ="T:Virgo.Domain.Entities.Auditing.ICreationAudited"/>的聚合根-主键为String类型
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.CreationAuditedEntity`1">
            <summary>
            抽象实现<see cref ="T:Virgo.Domain.Entities.Auditing.ICreationAudited"/>实体
            </summary>
            <typeparam name="TPrimaryKey">主键类型</typeparam>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.CreationAuditedEntity`1.CreationTime">
            <summary>
            该实体的创建时间
            </summary>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.CreationAuditedEntity`1.CreatorUserId">
            <summary>
            这个实体的创造者
            </summary>
        </member>
        <member name="M:Virgo.Domain.Entities.Auditing.CreationAuditedEntity`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.CreationAuditedEntity">
            <summary>
            抽象实现<see cref ="T:Virgo.Domain.Entities.Auditing.ICreationAudited"/>实体-主键为String类型
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.FullAuditedAggregateRoot`1">
            <summary>
            <see cref ="T:Virgo.Domain.Entities.Auditing.IFullAudited"/>完整审计的聚合根抽象实现类
            </summary>
            <typeparam name="TPrimaryKey">主键类型</typeparam>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.FullAuditedAggregateRoot`1.IsDeleted">
            <summary>
            此实体是否已删除
            </summary>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.FullAuditedAggregateRoot`1.DeleterUserId">
            <summary>
            哪个用户删除了这个实体
            </summary>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.FullAuditedAggregateRoot`1.DeletionTime">
            <summary>
            删除此实体的时间
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.FullAuditedAggregateRoot">
            <summary>
            <see cref ="T:Virgo.Domain.Entities.Auditing.IFullAudited"/>完整审计的聚合根抽象实现类-主键为String类型
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.FullAuditedEntity`1">
            <summary>
            <see cref="T:Virgo.Domain.Entities.Auditing.IFullAudited"/> 完整审计基类抽象实现类
            </summary>
            <typeparam name="TPrimaryKey">实体主键类型</typeparam>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.FullAuditedEntity`1.IsDeleted">
            <summary>
            是否已删除
            </summary>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.FullAuditedEntity`1.DeleterUserId">
            <summary>
            删除用户
            </summary>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.FullAuditedEntity`1.DeletionTime">
            <summary>
            删除时间
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.FullAuditedEntity">
            <summary>
            <see cref="T:Virgo.Domain.Entities.Auditing.IFullAudited"/> 完整审计基类抽象实现类-主键为String类型
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.IAudited`1">
            <summary>
            创建/更新审计属性接口
            </summary>
            <typeparam name="TPrimaryKey">主键类型</typeparam>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.IAudited">
            <summary>
            创建/更新审计属性接口-主键为String类型
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.ICreationAudited`1">
            <summary>
            创建审计属性接口
            </summary>
            <typeparam name="TPrimaryKey">主键类型</typeparam>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.ICreationAudited`1.CreatorUserId">
            <summary>
            创建此实体的用户
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.ICreationAudited">
            <summary>
            创建审计属性接口-主键为String类型
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.IDeletionAudited`1">
            <summary>
            删除审计属性接口
            </summary>
            <typeparam name="TPrimaryKey">主键类型</typeparam>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.IDeletionAudited`1.DeleterUserId">
            <summary>
            删除此实体的用户
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.IDeletionAudited">
            <summary>
            删除审计属性接口-主键为String类型
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.IFullAudited`1">
            <summary>
            创建/更新/删除审计相关属性接口
            </summary>
            <typeparam name="TPrimaryKey">主键类型</typeparam>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.IFullAudited">
            <summary>
            创建/更新/删除审计相关属性接口
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.IHasCreationTime">
            <summary>
            创建时间属性接口
            </summary>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.IHasCreationTime.CreationTime">
            <summary>
            该实体的创建时间
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.IHasDeletionTime">
            <summary>
            删除时间/软删除属性接口
            </summary>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.IHasDeletionTime.DeletionTime">
            <summary>
            该实体的删除时间
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.IHasModificationTime">
            <summary>
            修改时间属性接口
            </summary>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.IHasModificationTime.LastModificationTime">
            <summary>
            此实体的上次修改时间
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.IModificationAudited`1">
            <summary>
            修改审计属性接口
            </summary>
            <typeparam name="TPrimaryKey">主键类型</typeparam>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.IModificationAudited`1.LastModifierUserId">
            <summary>
            此实体的上次修改用户
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.IModificationAudited">
            <summary>
            修改审计属性接口-主键为String类型
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Auditing.ISoftDelete">
            <summary>
            软删除属性接口
            </summary>
        </member>
        <member name="P:Virgo.Domain.Entities.Auditing.ISoftDelete.IsDeleted">
            <summary>
            用于将实体标记为"已删除"
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.Entity`1">
            <summary>
            <see cref="T:Virgo.Domain.Entities.IEntity"/>抽象实现类
            </summary>
            <typeparam name="TPrimaryKey"></typeparam>
        </member>
        <member name="T:Virgo.Domain.Entities.Entity">
            <summary>
            <see cref="T:Virgo.Domain.Entities.IEntity"/>抽象实现类-主键为String类型
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.IAggregateRoot`1">
            <summary>
            聚合根接口
            </summary>
            <typeparam name="TPrimaryKey">实体主键类型</typeparam>
        </member>
        <member name="T:Virgo.Domain.Entities.IAggregateRoot">
            <summary>
            聚合根接口-主键为String类型
            </summary>
        </member>
        <member name="T:Virgo.Domain.Entities.IEntity`1">
            <summary>
            定义基本实体类型的接口，系统中的所有实体都必须实现此接口
            </summary>
            <typeparam name="TPrimaryKey">实体的主键类型</typeparam>
        </member>
        <member name="P:Virgo.Domain.Entities.IEntity`1.Id">
            <summary>
            此实体的唯一标识符
            </summary>        
        </member>
        <member name="T:Virgo.Domain.Entities.IEntity">
            <summary>
            定义基本实体类型的接口，系统中的所有实体都必须实现此接口-主键为String类型
            </summary>
        </member>
        <member name="T:Virgo.Domain.Uow.IActiveUnitOfWork">
            <summary>
            定义当前<see cref="T:Virgo.Domain.Uow.IUnitOfWork"/> 的基本操作
            </summary>
        </member>
        <member name="E:Virgo.Domain.Uow.IActiveUnitOfWork.Completed">
            <summary>
            事务提交成功事件
            </summary>
        </member>
        <member name="E:Virgo.Domain.Uow.IActiveUnitOfWork.Failed">
            <summary>
            事务提交失败事件
            </summary>
        </member>
        <member name="E:Virgo.Domain.Uow.IActiveUnitOfWork.Disposed">
            <summary>
            事务释放时事件
            </summary>
        </member>
        <member name="P:Virgo.Domain.Uow.IActiveUnitOfWork.IsDisposed">
            <summary>
            当前资源是否已释放
            </summary>
        </member>
        <member name="T:Virgo.Domain.Uow.IUnitOfWork">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="P:Virgo.Domain.Uow.IUnitOfWork.Transaction">
            <summary>
            事务
            </summary>
        </member>
        <member name="P:Virgo.Domain.Uow.IUnitOfWork.Connection">
            <summary>
            连接器
            </summary>
        </member>
        <member name="M:Virgo.Domain.Uow.IUnitOfWork.BeginTransaction(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            开启事务
            </summary>
            <param name="isolationLevel">事务隔离级别</param>
        </member>
        <member name="M:Virgo.Domain.Uow.IUnitOfWork.Commit">
            <summary>
            提交事务操作
            </summary>
        </member>
        <member name="M:Virgo.Domain.Uow.IUnitOfWork.Rollback">
            <summary>
            事务回滚
            </summary>
        </member>
        <member name="T:Virgo.Domain.Uow.UnitOfWorkAttribute">
            <summary>
            标记方法是否使用事务提交，如果标记启用事务提交，则所有操作将在打开数据库后一并提交，失败将回滚
            </summary>
            <remarks>
            如果调用此方法之外已存在一个工作单元，并不会影响，因为他们将会使用同一个事务提交
            </remarks>
        </member>
        <member name="T:Virgo.Domain.Uow.UnitOfWorkBase">
            <summary>
            工作单元基类，所有工作单元类继承自此类
            </summary>
        </member>
        <member name="P:Virgo.Domain.Uow.UnitOfWorkBase.IsDisposed">
            <summary>
            当前资源是否已释放
            </summary>
        </member>
        <member name="P:Virgo.Domain.Uow.UnitOfWorkBase.Transaction">
            <summary>
            事务
            </summary>
        </member>
        <member name="P:Virgo.Domain.Uow.UnitOfWorkBase.Connection">
            <summary>
            连接
            </summary>
        </member>
        <member name="E:Virgo.Domain.Uow.UnitOfWorkBase.Completed">
            <summary>
            事务提交成功事件
            </summary>
        </member>
        <member name="E:Virgo.Domain.Uow.UnitOfWorkBase.Disposed">
            <summary>
            事务释放时事件
            </summary>
        </member>
        <member name="E:Virgo.Domain.Uow.UnitOfWorkBase.Failed">
            <summary>
            事务提交失败事件
            </summary>
        </member>
        <member name="F:Virgo.Domain.Uow.UnitOfWorkBase._isBeginCalled">
            <summary>
            <see cref="M:Virgo.Domain.Uow.UnitOfWorkBase.BeginTransaction(System.Nullable{System.Data.IsolationLevel})"/>方法是否被调用过
            </summary>
        </member>
        <member name="F:Virgo.Domain.Uow.UnitOfWorkBase._isCommitCalled">
            <summary>
            <see cref="M:Virgo.Domain.Uow.UnitOfWorkBase.Commit"/>方法是否被调用过
            </summary>
        </member>
        <member name="F:Virgo.Domain.Uow.UnitOfWorkBase._succeed">
            <summary>
            当前工作单元是否成功完成
            </summary>
        </member>
        <member name="F:Virgo.Domain.Uow.UnitOfWorkBase._exception">
            <summary>
            工作单元失败异常原因
            </summary>
        </member>
        <member name="M:Virgo.Domain.Uow.UnitOfWorkBase.#ctor">
            <summary>
            构造函数
            </summary>
            <param name="defaultOptions"></param>
        </member>
        <member name="M:Virgo.Domain.Uow.UnitOfWorkBase.OnCompleted">
            <summary>
            工作单元完成事件
            </summary>
        </member>
        <member name="M:Virgo.Domain.Uow.UnitOfWorkBase.OnFailed(System.Exception)">
            <summary>
            提交失败事件
            </summary>
            <param name="ex">失败异常</param>
        </member>
        <member name="M:Virgo.Domain.Uow.UnitOfWorkBase.OnDisposed">
            <summary>
            资源释放事件
            </summary>
        </member>
        <member name="M:Virgo.Domain.Uow.UnitOfWorkBase.IsBeginCalled">
            <summary>
            工作单元是否已开启
            </summary>
        </member>
        <member name="M:Virgo.Domain.Uow.UnitOfWorkBase.IsCommitCalled">
            <summary>
            工作单元是否已提交
            </summary>
        </member>
        <member name="M:Virgo.Domain.Uow.UnitOfWorkBase.BeginTransaction(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            开启事务
            </summary>
            <param name="isolationLevel"></param>
        </member>
        <member name="M:Virgo.Domain.Uow.UnitOfWorkBase.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:Virgo.Domain.Uow.UnitOfWorkBase.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:Virgo.Domain.Uow.UnitOfWorkBase.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="T:Virgo.Domain.Uow.UnitOfWorkExtensions">
            <summary>
            注册工作单元拦截器拓展
            </summary>
        </member>
        <member name="M:Virgo.Domain.Uow.UnitOfWorkExtensions.RegisterUnitOfWorkInterceptor(Autofac.ContainerBuilder)">
            <summary>
            注册工作单元拦截器
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Domain.Uow.UnitOfWorkFailedEventArgs">
            <summary>
            <see cref="E:Virgo.Domain.Uow.IActiveUnitOfWork.Failed"/>事件的事件参数
            </summary>
        </member>
        <member name="P:Virgo.Domain.Uow.UnitOfWorkFailedEventArgs.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="T:Virgo.Domain.Uow.UnitOfWorkInterceptor">
            <summary>
            <see cref="T:Virgo.Domain.Uow.IUnitOfWork"/>AOP模式执行
            </summary>
        </member>
        <member name="T:Virgo.Extensions.CollectionsExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1"/>拓展方法
            </summary>
        </member>
        <member name="M:Virgo.Extensions.CollectionsExtensions.ForEach(System.Object[],System.Action{System.Object})">
            <summary>
            遍历数组
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
        </member>
        <member name="M:Virgo.Extensions.CollectionsExtensions.ForEach(System.Collections.Generic.IEnumerable{System.Object},System.Action{System.Object})">
            <summary>
            遍历IEnumerable
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
        </member>
        <member name="M:Virgo.Extensions.CollectionsExtensions.ForEach(System.Collections.Generic.IList{System.Object},System.Action{System.Object})">
            <summary>
            遍历集合
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
        </member>
        <member name="M:Virgo.Extensions.CollectionsExtensions.ForEach``1(``0[],System.Action{``0})">
            <summary>
            遍历数组
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Virgo.Extensions.CollectionsExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历IEnumerable
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Virgo.Extensions.CollectionsExtensions.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0})">
            <summary>
            遍历List
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Virgo.Extensions.CollectionsExtensions.ForEach``1(System.Object[],System.Func{System.Object,``0})">
            <summary>
            遍历数组并返回一个新的List
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.CollectionsExtensions.ForEach``1(System.Collections.Generic.IEnumerable{System.Object},System.Func{System.Object,``0})">
            <summary>
            遍历IEnumerable并返回一个新的List
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.CollectionsExtensions.ForEach``1(System.Collections.Generic.IList{System.Object},System.Func{System.Object,``0})">
            <summary>
            遍历List并返回一个新的List
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.CollectionsExtensions.ForEach``1(``0[],System.Func{``0,``0})">
            <summary>
            遍历数组并返回一个新的List
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.CollectionsExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0})">
            <summary>
            遍历IEnumerable并返回一个新的List
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.CollectionsExtensions.ForEach``1(System.Collections.Generic.IList{``0},System.Func{``0,``0})">
            <summary>
            遍历List并返回一个新的List
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.CollectionsExtensions.ForEachAsync(System.Object[],System.Action{System.Object})">
            <summary>
            遍历数组
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
        </member>
        <member name="M:Virgo.Extensions.CollectionsExtensions.ForEachAsync``1(``0[],System.Action{``0})">
            <summary>
            遍历数组
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Virgo.Extensions.CollectionsExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历IEnumerable
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Virgo.Extensions.CollectionsExtensions.ForEachAsync``1(System.Collections.Generic.IList{``0},System.Action{``0})">
            <summary>
            遍历List
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Virgo.Extensions.ComparableExtensions">
            <summary>
            <see cref="T:System.IComparable"/>的扩展方法。
            </summary>
        </member>
        <member name="M:Virgo.Extensions.ComparableExtensions.IsBetween``1(``0,``0,``0)">
            <summary>
            检查值是否介于最小值和最大值之间
            </summary>
            <param name="value">要检查的值</param>
            <param name="minInclusiveValue">最小值（包括）</param>
            <param name="maxInclusiveValue">最大值（包括）</param>
        </member>
        <member name="T:Virgo.Extensions.ConvertExtensions">
            <summary>
            <see cref="T:System.Convert"/>拓展方法
            </summary>
        </member>
        <member name="M:Virgo.Extensions.ConvertExtensions.ToInt32(System.String)">
            <summary>
            字符串转int
            </summary>
            <param name="s">源字符串</param>
            <returns>int类型的数字</returns>
        </member>
        <member name="M:Virgo.Extensions.ConvertExtensions.ToInt64(System.String)">
            <summary>
            字符串转long
            </summary>
            <param name="s">源字符串</param>
            <returns>int类型的数字</returns>
        </member>
        <member name="M:Virgo.Extensions.ConvertExtensions.ToDouble(System.String)">
            <summary>
            字符串转double
            </summary>
            <param name="s">源字符串</param>
            <returns>double类型的数据</returns>
        </member>
        <member name="M:Virgo.Extensions.ConvertExtensions.ToDecimal(System.String)">
            <summary>
            字符串转decimal
            </summary>
            <param name="s">源字符串</param>
            <returns>int类型的数字</returns>
        </member>
        <member name="M:Virgo.Extensions.ConvertExtensions.ToDecimal(System.Double)">
            <summary>
            字符串转decimal
            </summary>
            <param name="s">源字符串</param>
            <returns>int类型的数字</returns>
        </member>
        <member name="M:Virgo.Extensions.ConvertExtensions.ToDouble(System.Decimal)">
            <summary>
            字符串转double
            </summary>
            <param name="s">源字符串</param>
            <returns>double类型的数据</returns>
        </member>
        <member name="M:Virgo.Extensions.ConvertExtensions.ToInt32(System.Double)">
            <summary>
            将double转换成int
            </summary>
            <param name="num">double类型</param>
            <returns>int类型</returns>
        </member>
        <member name="M:Virgo.Extensions.ConvertExtensions.ToInt32(System.Decimal)">
            <summary>
            将double转换成int
            </summary>
            <param name="num">double类型</param>
            <returns>int类型</returns>
        </member>
        <member name="M:Virgo.Extensions.ConvertExtensions.ToDouble(System.Int32)">
            <summary>
            将int转换成double
            </summary>
            <param name="num">int类型</param>
            <returns>int类型</returns>
        </member>
        <member name="M:Virgo.Extensions.ConvertExtensions.ToDecimal(System.Int32)">
            <summary>
            将int转换成decimal
            </summary>
            <param name="num">int类型</param>
            <returns>int类型</returns>
        </member>
        <member name="M:Virgo.Extensions.ConvertExtensions.ToDateTime(System.String)">
            <summary>
            字符串转时间
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.ConvertExtensions.ToGuid(System.String)">
            <summary>
            字符串转Guid
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Extensions.DataTableExtensions">
            <summary>
            <see cref="T:System.Data.DataTable"/>拓展类
            </summary>
        </member>
        <member name="M:Virgo.Extensions.DataTableExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            <see cref="T:System.Collections.IEnumerable"/>转换到<see cref="T:System.Data.DataTable"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.DataTableExtensions.ConvertToList``1(System.Data.DataTable)">
            <summary>
            <see cref="T:System.Data.DataTable"/>转换到<see cref="T:System.Collections.IList"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.DataTableExtensions.ToCsv(System.Data.DataTable)">
             <summary>
            将DataTable转换为标准的CSV
             </summary>
             <param name="table">数据表</param>
             <returns>返回标准的CSV</returns>
        </member>
        <member name="T:Virgo.Extensions.DateTimeExtensions">
            <summary>
            <see cref="T:System.DateTime"/>的扩展方法
            </summary>
        </member>
        <member name="M:Virgo.Extensions.DateTimeExtensions.ConvertDateTimeToLong(System.DateTime)">
            <summary>  
            DateTime时间格式转换为时间戳格式[13位时间戳]
            </summary>  
            <param name="time">时间</param>  
            <returns>long</returns>  
        </member>
        <member name="M:Virgo.Extensions.DateTimeExtensions.ConvertLocalFromTimestamp(System.Int64)">
            <summary>        
            将本地时间戳转为C#格式时间[13位时间戳]   
            </summary>        
            <param name="timeStamp"></param>        
            <returns></returns>        
        </member>
        <member name="M:Virgo.Extensions.DateTimeExtensions.ToUnixTimestamp(System.DateTime)">
            <summary>
            将日期时间转换为Unix时间戳[10位时间戳]
            </summary>
            <param name="time">此日期时间</param>
            <returns>UNIX时间戳</returns>
        </member>
        <member name="M:Virgo.Extensions.DateTimeExtensions.FromUnixTimestamp(System.Int64)">
            <summary>
            将中的Unix时间戳转换为日期时间[10位时间戳]
            </summary>
            <param name="unixTime">这个Unix时间戳</param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Extensions.ExcelExtensions">
            <summary>
            Excel拓展
            </summary>
        </member>
        <member name="M:Virgo.Extensions.ExcelExtensions.DynmaicCellToList``1(System.String[0:,0:])">
            <summary>
            动态单元格转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Extensions.LinqExtensions">
            <summary>
            LINQ扩展方法
            </summary>
        </member>
        <member name="M:Virgo.Extensions.LinqExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            与连接
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="left">左条件</param>
            <param name="right">右条件</param>
            <returns>新表达式</returns>
        </member>
        <member name="M:Virgo.Extensions.LinqExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            或连接
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="left">左条件</param>
            <param name="right">右条件</param>
            <returns>新表达式</returns>
        </member>
        <member name="T:Virgo.Extensions.ObjectExtensions">
            <summary>
            <see cref="T:System.Object"/>拓展方法
            </summary>
        </member>
        <member name="M:Virgo.Extensions.ObjectExtensions.Serialize``1(``0)">
            <summary>
            将类型序列化为字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.ObjectExtensions.Deserialize``1(System.String)">
            <summary>
            将字符串反序列化为类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.ObjectExtensions.TryDeserialize``1(System.String,``0@)">
            <summary>
            尝试将字符串反序列化为类型
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="s"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.ObjectExtensions.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            将字符串序列化为匿名类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <param name="anonymousTypeObject"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.ObjectExtensions.DeepClone``1(``0)">
            <summary>
            执行对象的深层复制
            </summary>
            <typeparam name="T">要复制的对象的类型</typeparam>
            <param name="obj">要复制的对象实例</param>
            <returns>The copied object.</returns>
        </member>
        <member name="M:Virgo.Extensions.ObjectExtensions.IsValid``1(``0)">
            <summary>
            属性验证是否通过
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.ObjectExtensions.IsNull(System.Object)">
            <summary>
            判断对象是否为null
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.RandomExtensions.StrictNext(System.Random,System.Int32)">
            <summary>
            生成真正的随机数
            </summary>
            <param name="r"></param>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Extensions.StreamExtensions">
            <summary>
            <see cref="T:System.IO.Stream"/>的扩展方法
            </summary>
        </member>
        <member name="M:Virgo.Extensions.StreamExtensions.GetBytesAsync(System.IO.Stream)">
            <summary>
            将流转换为字节
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.StreamExtensions.GetStreamAsync(System.Byte[])">
            <summary>
            将字节转换为流
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.StreamExtensions.GetBase64String(System.IO.Stream)">
            <summary>
            将流转换为base64编码字符串
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.StreamExtensions.CopyToFile(System.IO.Stream,System.String,System.Int32)">
            <summary>
            以文件流的形式复制大文件
            </summary>
            <param name="fs">源</param>
            <param name="dest">目标地址</param>
            <param name="bufferSize">缓冲区大小，默认8MB</param>
        </member>
        <member name="M:Virgo.Extensions.StreamExtensions.CopyToFileAsync(System.IO.Stream,System.String,System.Int32)">
            <summary>
            以文件流的形式复制大文件(异步方式)
            </summary>
            <param name="fs">源</param>
            <param name="dest">目标地址</param>
            <param name="bufferSize">缓冲区大小，默认8MB</param>
        </member>
        <member name="M:Virgo.Extensions.StreamExtensions.SaveFile(System.IO.MemoryStream,System.String)">
            <summary>
            将内存流转储成文件
            </summary>
            <param name="ms"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Virgo.Extensions.StreamExtensions.GetFileMD5(System.IO.FileStream)">
            <summary>
            计算文件的 MD5 值
            </summary>
            <param name="fs">源文件流</param>
            <returns>MD5 值16进制字符串</returns>
        </member>
        <member name="M:Virgo.Extensions.StreamExtensions.GetFileSha1(System.IO.Stream)">
            <summary>
            计算文件的 sha1 值
            </summary>
            <param name="fs">源文件流</param>
            <returns>sha1 值16进制字符串</returns>
        </member>
        <member name="M:Virgo.Extensions.StreamExtensions.HashFile(System.IO.Stream,System.String)">
            <summary>
            计算文件的哈希值
            </summary>
            <param name="fs">被操作的源数据流</param>
            <param name="algo">加密算法</param>
            <returns>哈希值16进制字符串</returns>
        </member>
        <member name="T:Virgo.Extensions.StringExtensions">
            <summary>
            <see cref="T:System.String"/>的扩展方法
            </summary>
        </member>
        <member name="M:Virgo.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            判断字符串是否为空
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            判断字符串是否为空，或仅包含空格字符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.StringExtensions.MatchEmail(System.String,System.Boolean@)">
            <summary>
            匹配Email
            </summary>
            <param name="s">源字符串</param>
            <param name="isMatch">是否匹配成功，若返回true，则会得到一个Match对象，否则为null</param>
            <returns>匹配对象</returns>
        </member>
        <member name="M:Virgo.Extensions.StringExtensions.MatchEmail(System.String)">
            <summary>
            匹配Email
            </summary>
            <param name="s">源字符串</param>
            <returns>是否匹配成功</returns>
        </member>
        <member name="M:Virgo.Extensions.StringExtensions.MatchUrl(System.String,System.Boolean@)">
            <summary>
            匹配完整格式的URL
            </summary>
            <param name="s">源字符串</param>
            <param name="isMatch">是否匹配成功，若返回true，则会得到一个Match对象，否则为null</param>
            <returns>匹配对象</returns>
        </member>
        <member name="M:Virgo.Extensions.StringExtensions.MatchUrl(System.String)">
            <summary>
            匹配完整格式的URL
            </summary>
            <param name="s">源字符串</param>
            <returns>是否匹配成功</returns>
        </member>
        <member name="M:Virgo.Extensions.StringExtensions.MatchIdentifyCard(System.String)">
            <summary>
            根据GB11643-1999标准权威校验中国身份证号码的合法性
            </summary>
            <param name="s">源字符串</param>
            <returns>是否匹配成功</returns>
        </member>
        <member name="M:Virgo.Extensions.StringExtensions.MatchInetAddress(System.String,System.Boolean@)">
            <summary>
            校验IP地址的正确性，同时支持IPv4和IPv6
            </summary>
            <param name="s">源字符串</param>
            <param name="isMatch">是否匹配成功，若返回true，则会得到一个Match对象，否则为null</param>
            <returns>匹配对象</returns>
        </member>
        <member name="M:Virgo.Extensions.StringExtensions.MatchInetAddress(System.String)">
            <summary>
            校验IP地址的正确性，同时支持IPv4和IPv6
            </summary>
            <param name="s">源字符串</param>
            <returns>是否匹配成功</returns>
        </member>
        <member name="M:Virgo.Extensions.StringExtensions.MatchPhoneNumber(System.String,System.Boolean@)">
            <summary>
            匹配手机号码
            </summary>
            <param name="s">源字符串</param>
            <param name="isMatch">是否匹配成功，若返回true，则会得到一个Match对象，否则为null</param>
            <returns>匹配对象</returns>
        </member>
        <member name="M:Virgo.Extensions.StringExtensions.MatchPhoneNumber(System.String)">
            <summary>
            匹配手机号码
            </summary>
            <param name="s">源字符串</param>
            <returns>是否匹配成功</returns>
        </member>
        <member name="M:Virgo.Extensions.StringExtensions.Replace(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            根据正则替换
            </summary>
            <param name="input"></param>
            <param name="regex">正则表达式</param>
            <param name="replacement">新内容</param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.StringExtensions.ReferenceEquals(System.Object,System.Object)">
            <summary>
            严格比较两个对象是否是同一对象
            </summary>
            <param name="_this">自己</param>
            <param name="o">需要比较的对象</param>
            <returns>是否同一对象</returns>
        </member>
        <member name="T:Virgo.Extensions.WebExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>的拓展方法
            </summary>
        </member>
        <member name="M:Virgo.Extensions.WebExtension.GetAbsoluteUri(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取完整的请求地址
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Extensions.WebSocketExtensions">
            <summary>
            <see cref="T:System.Net.WebSockets.WebSocket"/>拓展
            </summary>
        </member>
        <member name="M:Virgo.Extensions.WebSocketExtensions.SendStringAsync(System.Net.WebSockets.WebSocket,System.String,System.Threading.CancellationToken)">
            <summary>
            发送消息
            </summary>
            <param name="socket"></param>
            <param name="data"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Extensions.WebSocketExtensions.ReceiveStringAsync(System.Net.WebSockets.WebSocket,System.Threading.CancellationToken)">
            <summary>
            接收消息
            </summary>
            <param name="socket"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Files.ISevenZipCompressor">
            <summary>
            7z压缩
            </summary>
        </member>
        <member name="M:Virgo.Files.ISevenZipCompressor.Decompress(System.String,System.String,System.Boolean)">
            <summary>
            解压文件，自动检测压缩包类型
            </summary>
            <param name="compressedFile">rar文件</param>
            <param name="dir">解压到...</param>
            <param name="ignoreEmptyDir">忽略空文件夹</param>
        </member>
        <member name="M:Virgo.Files.ISevenZipCompressor.Extract(System.String,System.String,System.Boolean)">
            <summary>
            解压文件，自动检测压缩包类型
            </summary>
            <param name="compressedFile">rar文件</param>
            <param name="dir">解压到...</param>
            <param name="ignoreEmptyDir">忽略空文件夹</param>
        </member>
        <member name="M:Virgo.Files.ISevenZipCompressor.UnRar(System.String,System.String,System.Boolean)">
            <summary>
            解压rar文件
            </summary>
            <param name="rar">rar文件</param>
            <param name="dir">解压到...</param>
            <param name="ignoreEmptyDir">忽略空文件夹</param>
        </member>
        <member name="M:Virgo.Files.ISevenZipCompressor.Zip(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            压缩多个文件
            </summary>
            <param name="files">多个文件路径，文件或文件夹</param>
            <param name="zipFile">压缩到...</param>
            <param name="rootdir">压缩包内部根文件夹</param>
        </member>
        <member name="M:Virgo.Files.ISevenZipCompressor.ZipStream(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            将多个文件压缩到一个文件流中，可保存为zip文件，方便于web方式下载
            </summary>
            <param name="files">多个文件路径，文件或文件夹，或网络路径http/https</param>
            <param name="rootdir"></param>
            <returns>文件流</returns>
        </member>
        <member name="T:Virgo.Files.SevenZipCompressor">
            <summary>
            7z压缩
            </summary>
        </member>
        <member name="M:Virgo.Files.SevenZipCompressor.#ctor(System.Net.Http.IHttpClientFactory)">
            <summary>
            
            </summary>
            <param name="httpClientFactory"></param>
        </member>
        <member name="M:Virgo.Files.SevenZipCompressor.ZipStream(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            将多个文件压缩到一个文件流中，可保存为zip文件，方便于web方式下载
            </summary>
            <param name="files">多个文件路径，文件或文件夹，或网络路径http/https</param>
            <param name="rootdir"></param>
            <returns>文件流</returns>
        </member>
        <member name="M:Virgo.Files.SevenZipCompressor.Zip(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            压缩多个文件
            </summary>
            <param name="files">多个文件路径，文件或文件夹</param>
            <param name="zipFile">压缩到...</param>
            <param name="rootdir">压缩包内部根文件夹</param>
        </member>
        <member name="M:Virgo.Files.SevenZipCompressor.UnRar(System.String,System.String,System.Boolean)">
            <summary>
            解压rar文件
            </summary>
            <param name="rar">rar文件</param>
            <param name="dir">解压到...</param>
            <param name="ignoreEmptyDir">忽略空文件夹</param>
        </member>
        <member name="M:Virgo.Files.SevenZipCompressor.Extract(System.String,System.String,System.Boolean)">
            <summary>
            解压文件，自动检测压缩包类型
            </summary>
            <param name="compressedFile">rar文件</param>
            <param name="dir">解压到...</param>
            <param name="ignoreEmptyDir">忽略空文件夹</param>
        </member>
        <member name="M:Virgo.Files.SevenZipCompressor.Decompress(System.String,System.String,System.Boolean)">
            <summary>
            解压文件，自动检测压缩包类型
            </summary>
            <param name="compressedFile">rar文件</param>
            <param name="dir">解压到...</param>
            <param name="ignoreEmptyDir">忽略空文件夹</param>
        </member>
        <member name="M:Virgo.Files.SevenZipCompressor.CreateZipArchive(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            创建zip包
            </summary>
            <param name="files"></param>
            <param name="rootdir"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Files.SevenZipCompressor.GetFileEntryMaps(System.Collections.Generic.List{System.String})">
            <summary>
            获取文件路径和zip-entry的映射
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Files.SevenZipCompressorExtensions">
            <summary>
            注入7z压缩<see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection"/>容器扩展方法
            </summary>
        </member>
        <member name="M:Virgo.Files.SevenZipCompressorExtensions.AddSevenZipCompressor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入7z压缩
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Files.WinrarHelper">
            <summary>
            WinRAR压缩操作
            </summary>
        </member>
        <member name="M:Virgo.Files.WinrarHelper.Rar(System.String,System.String,System.String)">
            <summary>
            压缩
            </summary>
            <param name="zipname">要解压的文件名</param>
            <param name="zippath">要压缩的文件目录</param>
            <param name="dirpath">初始目录</param>
        </member>
        <member name="M:Virgo.Files.WinrarHelper.UnRar(System.String,System.String)">
            <summary>
            解压缩
            </summary>
            <param name="zipname">要解压的文件名</param>
            <param name="zippath">要解压的文件路径</param>
        </member>
        <member name="T:Virgo.Files.ZipHelper">
            <summary>
            压缩解压操作类，使用的是SharpZipLib
            </summary>
        </member>
        <member name="M:Virgo.Files.ZipHelper.CompressFile(System.String,System.String)">
            <summary>
            压缩文件
            </summary>
            <param name="srcFile">要压缩的文件路径</param>
            <param name="destFile">生成的压缩文件路径</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Virgo.Files.ZipHelper.ZipFiles(System.String[],System.String)">
            <summary>
            压缩多个文件
            </summary>
            <param name="srcFiles">多个文件路径</param>
            <param name="destFile">压缩文件的路径</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Virgo.Files.ZipHelper.ZipDir(System.String,System.String)">
            <summary>
            压缩目录
            </summary>
            <param name="dir">目录路径</param>
            <param name="destFile">压缩文件路径</param>
            <exception cref="T:System.ArgumentException">参数错误</exception>
        </member>
        <member name="M:Virgo.Files.ZipHelper.GetFileList(System.String)">
            <summary>
            列表压缩文件里的所有文件
            </summary>
            <param name="zipPath">压缩文件路径</param>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:Virgo.Files.ZipHelper.DeleteFileFromZip(System.String,System.String[])">
            <summary>
            删除zip文件中的某个文件
            </summary>
            <param name="zipPath">压缩文件路径</param>
            <param name="files">要删除的某个文件</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Virgo.Files.ZipHelper.UnZipFile(System.String,System.String)">
            <summary>
            解压文件
            </summary>
            <param name="zipPath">要解压的文件</param>
            <param name="outputDir">解压后放置的目录</param>
        </member>
        <member name="M:Virgo.Files.ZipHelper.Decompress(System.String,System.String)">
            <summary>
            解压文件
            </summary>
            <param name="srcFile">压缩文件路径</param>
            <param name="destDir">解压后文件夹的路径</param>
        </member>
        <member name="P:Virgo.Files.ZipHelper.BufferSize">
            <summary>
            设置字节数组大小,默认为4096
            </summary>
        </member>
        <member name="M:Virgo.Files.ZipHelper.CheckCompressionLevel(System.Int32)">
            <summary>
            检查压缩等级是否合法.
            </summary>
            <param name="compressionLevel">等级值</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:Virgo.Files.ZipHelper.CompressFile(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Int32)">
            <summary>
            压缩多个文件/文件夹
            </summary>
            <param name="sourceList">源文件/文件夹路径列表</param>
            <param name="zipFilePath">压缩文件路径</param>
            <param name="comment">注释信息</param>
            <param name="password">压缩密码</param>
            <param name="compressionLevel">压缩等级，范围从0到9，可选，默认为6</param>
            <exception cref="T:System.Exception"></exception>
            <returns></returns>
        </member>
        <member name="M:Virgo.Files.ZipHelper.DecomparessFile(System.String,System.String,System.String)">
            <summary>
            解压文件到指定文件夹
            </summary>
            <param name="sourceFile">压缩文件</param>
            <param name="destinationDirectory">目标文件夹，如果为空则解压到当前文件夹下</param>
            <param name="password">密码</param>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.Exception"></exception>
            <returns></returns>
        </member>
        <member name="M:Virgo.Files.ZipHelper.PrepareFileSystementities(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            为压缩准备文件系统对象
            </summary>
            <param name="sourceFileEntityPathList"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Files.ZipHelper.GetAllFileSystemEntities(System.String,System.String)">
            <summary>
            获取所有文件系统对象
            </summary>
            <param name="source">源路径</param>
            <param name="topDirectory">顶级文件夹</param>
            <returns>字典中Key为完整路径，Value为文件(夹)名称</returns>
        </member>
        <member name="M:Virgo.Files.ZipHelper.CompressBytes(System.Byte[],System.String,System.Int32)">
            <summary>
            压缩字节数组
            </summary>
            <param name="sourceBytes">源字节数组</param>
            <param name="compressionLevel">压缩等级</param>
            <param name="password">密码</param>
            <exception cref="T:System.Exception"></exception>
            <returns>压缩后的字节数组</returns>
        </member>
        <member name="M:Virgo.Files.ZipHelper.DecompressBytes(System.Byte[],System.String)">
            <summary>
            解压字节数组
            </summary>
            <param name="sourceBytes">源字节数组</param>
            <param name="password">密码</param>
            <exception cref="T:System.Exception"></exception>
            <returns>解压后的字节数组</returns>
        </member>
        <member name="T:Virgo.Hardware.CpuInfo">
            <summary>
            CPU模型
            </summary>
        </member>
        <member name="P:Virgo.Hardware.CpuInfo.DeviceID">
            <summary>
            设备ID端口
            </summary>
        </member>
        <member name="P:Virgo.Hardware.CpuInfo.Type">
            <summary>
            CPU型号 
            </summary>
        </member>
        <member name="P:Virgo.Hardware.CpuInfo.Manufacturer">
            <summary>
            CPU厂商
            </summary>
        </member>
        <member name="P:Virgo.Hardware.CpuInfo.MaxClockSpeed">
            <summary>
            CPU最大睿频
            </summary>
        </member>
        <member name="P:Virgo.Hardware.CpuInfo.CurrentClockSpeed">
            <summary>
            CPU的时钟频率
            </summary>
        </member>
        <member name="P:Virgo.Hardware.CpuInfo.NumberOfCores">
            <summary>
            CPU核心数
            </summary>
        </member>
        <member name="P:Virgo.Hardware.CpuInfo.NumberOfLogicalProcessors">
            <summary>
            逻辑处理器核心数
            </summary>
        </member>
        <member name="P:Virgo.Hardware.CpuInfo.CpuLoad">
            <summary>
            CPU使用率
            </summary>
        </member>
        <member name="P:Virgo.Hardware.CpuInfo.DataWidth">
            <summary>
            CPU位宽
            </summary>
        </member>
        <member name="P:Virgo.Hardware.CpuInfo.Temperature">
            <summary>
            核心温度
            </summary>
        </member>
        <member name="T:Virgo.Hardware.CPU_INFO">
            <summary>
            定义CPU的信息结构
            </summary>
        </member>
        <member name="T:Virgo.Hardware.DiskData">
            <summary>
            磁盘数据
            </summary>
        </member>
        <member name="F:Virgo.Hardware.DiskData.ReadAndWrite">
            <summary>
            读写
            </summary>
        </member>
        <member name="F:Virgo.Hardware.DiskData.Read">
            <summary>
            读
            </summary>
        </member>
        <member name="F:Virgo.Hardware.DiskData.Write">
            <summary>
            写
            </summary>
        </member>
        <member name="T:Virgo.Hardware.MemoryInfo">
            <summary>
            定义内存的信息结构
            </summary>
        </member>
        <member name="T:Virgo.Hardware.NetData">
            <summary>
            网络数据
            </summary>
        </member>
        <member name="F:Virgo.Hardware.NetData.ReceivedAndSent">
            <summary>
            收发
            </summary>
        </member>
        <member name="F:Virgo.Hardware.NetData.Received">
            <summary>
            收
            </summary>
        </member>
        <member name="F:Virgo.Hardware.NetData.Sent">
            <summary>
            发
            </summary>
        </member>
        <member name="T:Virgo.Hardware.RamInfo">
            <summary>
            内存条模型
            </summary>
        </member>
        <member name="T:Virgo.Hardware.SystemInfo">
            <summary>
            硬件信息，部分功能需要C++支持
            </summary>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="P:Virgo.Hardware.SystemInfo.ProcessorCount">
            <summary>
            获取CPU核心数 
            </summary>
        </member>
        <member name="P:Virgo.Hardware.SystemInfo.CpuLoad">
            <summary>
            获取CPU占用率 %
            </summary>
        </member>
        <member name="P:Virgo.Hardware.SystemInfo.MemoryAvailable">
            <summary>
            获取可用内存
            </summary>
        </member>
        <member name="P:Virgo.Hardware.SystemInfo.PhysicalMemory">
            <summary>
            获取物理内存
            </summary>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.FindAllApps(System.Int32)">
            <summary>
            查找所有应用程序标题 
            </summary>
            <param name="handle">应用程序标题范型</param>
            <returns>所有应用程序集合</returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetCpuCount">
            <summary>
            获取CPU的数量
            </summary>
            <returns>CPU的数量</returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetCpuInfo">
            <summary>
            获取CPU信息
            </summary>
            <returns>CPU信息</returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetRamInfo">
            <summary>
            获取内存信息
            </summary>
            <returns>内存信息</returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetCPUTemperature">
            <summary>
            获取CPU温度
            </summary>
            <returns>CPU温度</returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetProcessorData">
            <summary>
            WMI接口获取CPU使用率
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetMemoryVData">
            <summary>
            获取虚拟内存使用率详情
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetUsageVirtualMemory">
            <summary>
            获取虚拟内存使用率
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetUsedVirtualMemory">
            <summary>
            获取虚拟内存已用大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetTotalVirtualMemory">
            <summary>
            获取虚拟内存总大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetMemoryPData">
            <summary>
            获取物理内存使用率详情描述
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetTotalPhysicalMemory">
            <summary>
            获取物理内存总数，单位B
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetFreePhysicalMemory">
            <summary>
            获取空闲的物理内存数，单位B
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetUsedPhysicalMemory">
            <summary>
            获取已经使用了的物理内存数，单位B
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetDiskData(Virgo.Hardware.DiskData)">
            <summary>
            获取硬盘的读写速率
            </summary>
            <param name="dd">读或写</param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetNetData(Virgo.Hardware.NetData)">
            <summary>
            获取网络的传输速率
            </summary>
            <param name="nd">上传或下载</param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetMacAddress">
            <summary>
            获取网卡硬件地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetIPAddress">
            <summary>
            获取IP地址 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetLocalUsedIP">
            <summary>  
            获取当前使用的IP  
            </summary>  
            <returns></returns>  
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.RunApp(System.String,System.String,System.Boolean)">
            <summary>  
            运行一个控制台程序并返回其输出参数。  
            </summary>  
            <param name="filename">程序名</param>  
            <param name="arguments">输入参数</param>
            <param name="recordLog">是否记录日志</param>
            <returns></returns>  
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.GetOsVersion">
            <summary>
            获取操作系统版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.FormatBytes(System.Double)">
            <summary>
            将速度值格式化成字节单位
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.BootTime">
            <summary>
            获取计算机开机时间
            </summary>
            <returns>datetime</returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.QueryComputerSystem(System.String)">
            <summary>
            查询计算机系统信息
            </summary>
            <param name="type">类型名</param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.QueryEnvironment(System.String)">
            <summary>
            获取环境变量
            </summary>
            <param name="type">环境变量名</param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.DiskFree">
            <summary>
            获取磁盘可用空间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.DiskTotalSpace">
            <summary>
            获取磁盘总空间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.DiskUsedSpace">
            <summary>
            获取磁盘已用空间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Hardware.SystemInfo.DiskUsage">
            <summary>
            获取磁盘使用率
            </summary>
            <returns></returns>
        </member>
        <member name="T:Virgo.Hardware.SystemtimeInfo">
            <summary>
            定义系统时间的信息结构
            </summary>
        </member>
        <member name="T:Virgo.Hardware.Unit">
            <summary>
            字节单位枚举
            </summary>
        </member>
        <member name="M:Virgo.IP.IpHelper.Search(System.String)">
            <summary>
            使用默认搜索器获取IP地址信息。
            </summary>
            <param name="ip">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Virgo.IP.IpHelper.SearchWithI18N(System.String,System.String)">
            <summary>
            使用默认搜索器获取i8n的IP地址信息。
            </summary>
            <param name="ip">IP地址</param>
            <param name="langCode">语言代码.eg。 zh-CN，en。</param>
            <returns></returns>
        </member>
        <member name="T:Virgo.IP.IpSearcherType">
            <summary>
            IP搜索类型
            </summary>
        </member>
        <member name="F:Virgo.IP.IpSearcherType.China">
            <summary>
            中国
            </summary>
        </member>
        <member name="F:Virgo.IP.IpSearcherType.International">
            <summary>
            国际
            </summary>
        </member>
        <member name="T:Virgo.IP.IpSettings">
            <summary>
            IP设置
            </summary>
        </member>
        <member name="F:Virgo.IP.IpSettings.DefaultLanguage">
            <summary>
            默认语言代码，例如:zh-CN，en
            </summary>
        </member>
        <member name="F:Virgo.IP.IpSettings.DefalutSearcherType">
            <summary>
            只有同时应用IPTools.International和IPTools.China才会生效。
            </summary>
        </member>
        <member name="F:Virgo.IP.IpSettings.LoadInternationalDbToMemory">
            <summary>
            它可以使查询速度加倍。 只有使用IPTools.International才会生效。
            </summary>
        </member>
        <member name="M:Virgo.IP.IpTool.Write(System.Byte[],System.Int32,System.UInt64,System.Int32)">
            <summary>
            Write specfield bytes to a byte array start from offset.
            </summary>
        </member>
        <member name="M:Virgo.IP.IpTool.WriteIntLong(System.Byte[],System.Int32,System.Int64)">
            <summary>
            Write a int to a byte array.
            </summary>
        </member>
        <member name="M:Virgo.IP.IpTool.GetIntLong(System.Byte[],System.Int32)">
            <summary>
            Get a int from a byte array start from the specifiled offset.
            </summary>
        </member>
        <member name="M:Virgo.IP.IpTool.GetInt3(System.Byte[],System.Int32)">
            <summary>
            Get a int from a byte array start from the specifield offset.
            </summary>
        </member>
        <member name="M:Virgo.IP.IpTool.Ip2long(System.String)">
            <summary>
            String ip to long ip.
            </summary>
        </member>
        <member name="M:Virgo.IP.IpTool.Long2ip(System.Int64)">
            <summary>
            Int to ip string.
            </summary>
        </member>
        <member name="M:Virgo.IP.Models.HeaderBlock.GetBytes">
            <summary>
            Get the bytes for total storage
            </summary>
            <returns>
            Bytes gotten.
            </returns>
        </member>
        <member name="T:Virgo.IP.Searcher.DbSearcher">
            <summary>
            二进制搜索
            </summary>
        </member>
        <member name="F:Virgo.IP.Searcher.DbSearcher._raf">
            <summary>
            db file access handler
            </summary>
        </member>
        <member name="F:Virgo.IP.Searcher.DbSearcher._headerSip">
            <summary>
            header blocks buffer
            </summary>
        </member>
        <member name="F:Virgo.IP.Searcher.DbSearcher._firstIndexPtr">
            <summary>
            super blocks info 
            </summary>
        </member>
        <member name="F:Virgo.IP.Searcher.DbSearcher._dbBinStr">
            <summary>
            for memory mode
            the original db binary string
            </summary>
        </member>
        <member name="M:Virgo.IP.Searcher.DbSearcher.GetByIndexPtr(System.Int64)">
            <summary>
            Get by index ptr.
            </summary>
        </member>
        <member name="M:Virgo.IP.Searcher.DbSearcher.MemorySearch(System.Int64)">
            <summary>
            Get the region with a int ip address with memory binary search algorithm.
            </summary>
        </member>
        <member name="M:Virgo.IP.Searcher.DbSearcher.MemorySearch(System.String)">
            <summary>
            Get the region throught the ip address with memory binary search algorithm.
            </summary>
        </member>
        <member name="M:Virgo.IP.Searcher.DbSearcher.BtreeSearch(System.Int64)">
            <summary>
            Get the region with a int ip address with b-tree algorithm.
            </summary>
        </member>
        <member name="M:Virgo.IP.Searcher.DbSearcher.BtreeSearch(System.String)">
            <summary>
            Get the region throught the ip address with b-tree search algorithm.
            </summary>
        </member>
        <member name="M:Virgo.IP.Searcher.DbSearcher.BinarySearch(System.Int64)">
            <summary>
            Get the region with a int ip address with binary search algorithm.
            </summary>
        </member>
        <member name="M:Virgo.IP.Searcher.DbSearcher.BinarySearch(System.String)">
            <summary>
            Get the region throught the ip address with binary search algorithm.
            </summary>
        </member>
        <member name="M:Virgo.IP.Searcher.DbSearcher.MemorySearchAsync(System.String)">
            <summary>
            Get the region throught the ip address with memory binary search algorithm.
            </summary>
        </member>
        <member name="M:Virgo.IP.Searcher.DbSearcher.BtreeSearchAsync(System.String)">
            <summary>
            Get the region throught the ip address with b-tree search algorithm.
            </summary>
        </member>
        <member name="M:Virgo.IP.Searcher.DbSearcher.BinarySearchAsync(System.String)">
            <summary>
            Get the region throught the ip address with binary search algorithm.
            </summary>
        </member>
        <member name="M:Virgo.IP.Searcher.DbSearcher.Close">
            <summary>
            Close the db.
            </summary>
        </member>
        <member name="T:Virgo.IP.Searcher.IIpSearcher">
            <summary>
            IP搜索接口
            </summary>
        </member>
        <member name="T:Virgo.Media.ImageHelper">
            <summary>
            图片处理
            </summary>
        </member>
        <member name="M:Virgo.Media.ImageHelper.CutForSquare(System.IO.Stream,System.String,System.Int32,System.Int32)">
            <summary>
            正方型裁剪
            以图片中心为轴心，截取正方型，然后等比缩放
            用于头像处理
            </summary>
            <param name="fromFile">原图Stream对象</param>
            <param name="fileSaveUrl">缩略图存放地址</param>
            <param name="side">指定的边长（正方型）</param>
            <param name="quality">质量（范围0-100）</param>
        </member>
        <member name="M:Virgo.Media.ImageHelper.CutForCustom(System.IO.Stream,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            指定长宽裁剪
            按模版比例最大范围的裁剪图片并缩放至模版尺寸
            </summary>
            <param name="fromFile">原图Stream对象</param>
            <param name="fileSaveUrl">保存路径</param>
            <param name="maxWidth">最大宽(单位:px)</param>
            <param name="maxHeight">最大高(单位:px)</param>
            <param name="quality">质量（范围0-100）</param>
        </member>
        <member name="M:Virgo.Media.ImageHelper.ZoomAuto(System.IO.Stream,System.String,System.Double,System.Double,System.String,System.String)">
            <summary>
            图片等比缩放
            </summary>
            <param name="fromFile">原图Stream对象</param>
            <param name="savePath">缩略图存放地址</param>
            <param name="targetWidth">指定的最大宽度</param>
            <param name="targetHeight">指定的最大高度</param>
            <param name="watermarkText">水印文字(为""表示不使用水印)</param>
            <param name="watermarkImage">水印图片路径(为""表示不使用水印)</param>
        </member>
        <member name="M:Virgo.Media.ImageHelper.IsWebImage(System.String)">
            <summary>
            判断文件类型是否为WEB格式图片
            (注：JPG,GIF,BMP,PNG)
            </summary>
            <param name="contentType">HttpPostedFile.ContentType</param>
            <returns>是否为WEB格式图片</returns>
        </member>
        <member name="M:Virgo.Media.ImageHelper.CutImage(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            裁剪图片 -- 用GDI+   
            </summary>
            <param name="b">原始Bitmap</param>
            <param name="rec">裁剪区域</param>
            <returns>剪裁后的Bitmap</returns>
        </member>
        <member name="M:Virgo.Media.ImageHelper.ResizeImage(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>  
             Resize图片   
            </summary>  
            <param name="bmp">原始Bitmap </param>  
            <param name="newWidth">新的宽度</param>  
            <param name="newHeight">新的高度</param>  
            <returns>处理以后的图片</returns>  
        </member>
        <member name="M:Virgo.Media.ImageHelper.CutAndResize(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            裁剪并缩放
            </summary>
            <param name="bmp">原始图片</param>
            <param name="rec">裁剪的矩形区域</param>
            <param name="newWidth">新的宽度</param>  
            <param name="newHeight">新的高度</param>  
            <returns>处理以后的图片</returns>
        </member>
        <member name="M:Virgo.Media.ImageHelper.CompressImage(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            无损压缩图片
            </summary>
            <param name="sFile">原图片地址</param>
            <param name="dFile">压缩后保存图片地址</param>
            <param name="flag">压缩质量（数字越小压缩率越高）1-100</param>
            <param name="size">压缩后图片的最大大小</param>
            <param name="sfsc">是否是第一次调用</param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Media.ImageHelper.CompressImage(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32,System.Boolean)">
            <summary>
            无损压缩图片
            </summary>
            <param name="src">原图片文件流</param>
            <param name="dest">压缩后图片文件流</param>
            <param name="flag">压缩质量（数字越小压缩率越高）1-100</param>
            <param name="size">压缩后图片的最大大小</param>
            <param name="sfsc">是否是第一次调用</param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Media.ImageHelper.MakeThumbnail(System.Drawing.Image,System.String,System.Int32,System.Int32,Virgo.Media.ThumbnailCutMode)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImage">原图</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>    
        </member>
        <member name="M:Virgo.Media.ImageHelper.LDPic(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            调整光暗
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
            <param name="val">增加或减少的光暗值</param>
        </member>
        <member name="M:Virgo.Media.ImageHelper.RePic(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            反色处理
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:Virgo.Media.ImageHelper.Relief(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            浮雕处理
            </summary>
            <param name="oldBitmap">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:Virgo.Media.ImageHelper.ResizeImageAsync(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            拉伸图片
            </summary>
            <param name="bmp">原始图片</param>
            <param name="newW">新的宽度</param>
            <param name="newH">新的高度</param>
        </member>
        <member name="M:Virgo.Media.ImageHelper.FilPic(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            滤色处理
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:Virgo.Media.ImageHelper.RevPicLR(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            左右翻转
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:Virgo.Media.ImageHelper.RevPicUD(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            上下翻转
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:Virgo.Media.ImageHelper.Compress(System.Drawing.Image,System.String)">
            <summary>
            压缩到指定尺寸
            </summary>
            <param name="img"></param>
            <param name="newfile">新文件</param>
        </member>
        <member name="M:Virgo.Media.ImageHelper.Gray(System.Drawing.Color)">
            <summary>
            图片灰度化
            </summary>
            <param name="c">输入颜色</param>
            <returns>输出颜色</returns>
        </member>
        <member name="M:Virgo.Media.ImageHelper.BWPic(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            转换为黑白图片
            </summary>
            <param name="mybm">要进行处理的图片</param>
            <param name="width">图片的长度</param>
            <param name="height">图片的高度</param>
        </member>
        <member name="M:Virgo.Media.ImageHelper.GetFrames(System.Drawing.Image,System.String)">
            <summary>
            获取图片中的各帧
            </summary>
            <param name="gif">源gif</param>
            <param name="pSavedPath">保存路径</param>
        </member>
        <member name="M:Virgo.Media.ImageHelper.SaveDataUriAsImageFile(System.String)">
            <summary>
            将dataUri保存为图片
            </summary>
            <param name="source">dataUri数据源</param>
            <returns></returns>
            <exception cref="T:System.Exception">操作失败。</exception>
        </member>
        <member name="M:Virgo.Media.ImageHelper.UploadImageAsync(System.IO.Stream)">
            <summary>
            上传图片到百度图床
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Media.QRCoderHelper">
            <summary>
            <see cref="M:Virgo.Media.QRCoderHelper.QRCode(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)"/>辅助类
            </summary>
        </member>
        <member name="M:Virgo.Media.QRCoderHelper.QRCode(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            生成二维码
            </summary>
            <param name="msg">信息</param>
            <param name="version">版本 1 ~ 40</param>
            <param name="pixel">像素点大小</param>
            <param name="icon_path">图标路径</param>
            <param name="icon_size">图标尺寸</param>
            <param name="icon_border">图标边框厚度</param>
            <param name="white_edge">二维码白边</param>
            <returns>位图</returns>
        </member>
        <member name="T:Virgo.Media.ThumbnailCutMode">
            <summary>
            图像裁剪模式
            </summary>
        </member>
        <member name="F:Virgo.Media.ThumbnailCutMode.LockHeight">
            <summary>
            锁定高度
            </summary>
        </member>
        <member name="F:Virgo.Media.ThumbnailCutMode.LockWidth">
            <summary>
            锁定宽度
            </summary>
        </member>
        <member name="F:Virgo.Media.ThumbnailCutMode.Fixed">
            <summary>
            固定宽高
            </summary>
        </member>
        <member name="F:Virgo.Media.ThumbnailCutMode.Cut">
            <summary>
            裁剪
            </summary>
        </member>
        <member name="M:Virgo.Reflection.ReflectionHelper.GetDescription``1(System.String)">
            <summary>
            获取成员DescriptionAttribute值
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="T:Virgo.Security.HashEncode">
            <summary>
            得到随机安全码（哈希加密）。
            </summary>
        </member>
        <member name="M:Virgo.Security.HashEncode.GetSecurity(System.Random)">
            <summary>
            得到随机哈希加密字符串
            </summary>
            <returns>随机哈希加密字符串</returns>
        </member>
        <member name="M:Virgo.Security.HashEncode.HashEncoding(System.String)">
            <summary>
            哈希加密一个字符串
            </summary>
            <param name="security">需要加密的字符串</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="T:Virgo.Security.RsaKey">
            <summary>
            RSA密钥对
            </summary>
        </member>
        <member name="F:Virgo.Security.RsaKey.PublicKey">
            <summary>
            公钥
            </summary>
        </member>
        <member name="F:Virgo.Security.RsaKey.PrivateKey">
            <summary>
            私钥
            </summary>
        </member>
        <member name="T:Virgo.Security.RsaCrypt">
            <summary> 
            RSA加密解密及RSA签名和验证
            </summary> 
        </member>
        <member name="M:Virgo.Security.RsaCrypt.GenerateRsaKeys">
            <summary>
            生成 RSA 公钥和私钥
            </summary>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.RSAEncrypt(System.String,System.String)">
            <summary>
            RSA的加密函数 string
            </summary>
            <param name="publicKey">公钥</param>
            <param name="mStrEncryptString">需要加密的字符串</param>
            <returns>加密后的内容</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.RSAEncrypt(System.String)">
            <summary>
            RSA的加密函数 string
            </summary>
            <param name="mStrEncryptString">需要加密的字符串</param>
            <returns>加密后的内容</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.RSAEncrypt(System.Byte[],System.String)">
            <summary>
            RSA的加密函数 byte[]
            </summary>
            <param name="encryptString">需要加密的字节数组</param>
            <param name="publicKey">公钥</param>
            <returns>加密后的内容</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.RSAEncrypt(System.Byte[])">
            <summary>
            RSA的加密函数 byte[]
            </summary>
            <param name="encryptString">需要加密的字节数组</param>
            <returns>加密后的内容</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.RSADecrypt(System.String,System.String)">
            <summary>
            RSA的解密函数  string
            </summary>
            <param name="mStrDecryptString">需要解密的字符串</param>
            <param name="privateKey">私钥</param>
            <returns>解密后的内容</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.RSADecrypt(System.String)">
            <summary>
            RSA的解密函数  string
            </summary>
            <param name="mStrDecryptString">需要解密的字符串</param>
            <returns>解密后的内容</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.RSADecrypt(System.Byte[],System.String)">
            <summary>
            RSA的解密函数  byte
            </summary>
            <param name="decryptString">需要解密的字符串</param>
            <param name="privateKey">私钥</param>
            <returns>解密后的内容</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.RSADecrypt(System.Byte[])">
            <summary>
            RSA的解密函数  byte
            </summary>
            <param name="decryptString">需要解密的字符串</param>
            <returns>解密后的内容</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.GetHashBytes(System.String)">
            <summary>
            获取Hash描述表
            </summary>
            <param name="mStrSource">源数据</param>
            <returns>Hash描述表</returns>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.GetHashString(System.String)">
            <summary>
            获取Hash描述表
            </summary>
            <param name="mStrSource">源数据</param>
            <returns>Hash描述表</returns>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.GetHashBytes(System.IO.FileStream)">
            <summary>
            从文件流获取Hash描述表
            </summary>
            <param name="objFile">源文件</param>
            <returns>Hash描述表</returns>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.GetHashString(System.IO.FileStream)">
            <summary>
            从文件流获取Hash描述表
            </summary>
            <param name="objFile">源文件</param>
            <returns>Hash描述表</returns>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.SignatureBytes(System.Byte[],System.String)">
            <summary>
            RSA签名
            </summary>
            <param name="hashbyteSignature">签名字节数据</param>
            <param name="privateKey">私钥</param>
            <returns>处理结果</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The key is null.-or- The hash algorithm is null. </exception>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.SignatureString(System.Byte[],System.String)">
            <summary>
            RSA签名
            </summary>
            <param name="hashbyteSignature">签名字节数据</param>
            <param name="privateKey">私钥</param>
            <returns>处理结果</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The key is null.-or- The hash algorithm is null. </exception>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.SignatureBytes(System.String,System.String)">
            <summary>
            RSA签名
            </summary>
            <param name="mStrHashbyteSignature">签名字符串数据</param>
            <param name="pStrKeyPrivate">私钥</param>
            <returns>处理结果</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The key is null.-or- The hash algorithm is null. </exception>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.SignatureString(System.String,System.String)">
            <summary>
            RSA签名
            </summary>
            <param name="mStrHashbyteSignature">签名字符串数据</param>
            <param name="pStrKeyPrivate">私钥</param>
            <returns>处理结果</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The key is null.-or- The hash algorithm is null. </exception>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.SignatureDeformatter(System.Byte[],System.String,System.Byte[])">
            <summary>
            RSA 签名验证 
            </summary>
            <param name="deformatterData">反格式化字节数据</param>
            <param name="publicKey">公钥</param>
            <param name="hashbyteDeformatter">哈希字节数据</param>
            <returns>处理结果</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The key is null.-or- The hash algorithm is null. </exception>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.SignatureDeformatter(System.Byte[],System.String,System.String)">
            <summary>
            RSA 签名验证 
            </summary>
            <param name="deformatterData">反格式化字节数据</param>
            <param name="publicKey">公钥</param>
            <param name="pStrHashbyteDeformatter">哈希字符串数据</param>
            <returns>处理结果</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The key is null.-or- The hash algorithm is null. </exception>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.SignatureDeformatter(System.String,System.String,System.Byte[])">
            <summary>
            RSA 签名验证
            </summary>
            <param name="pStrDeformatterData">反格式化字符串数据</param>
            <param name="publicKey">公钥</param>
            <param name="hashbyteDeformatter">哈希字节数据</param>
            <returns>处理结果</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The key is null.-or- The hash algorithm is null. </exception>
        </member>
        <member name="M:Virgo.Security.RsaCrypt.SignatureDeformatter(System.String,System.String,System.String)">
            <summary>
            RSA 签名验证
            </summary>
            <param name="pStrDeformatterData">格式字符串数据</param>
            <param name="publicKey">公钥</param>
            <param name="pStrHashbyteDeformatter">哈希字符串数据</param>
            <returns>处理结果</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The key is null.-or- The hash algorithm is null. </exception>
        </member>
        <member name="T:Virgo.Snowflake.IdGenerator">
            <summary>
            雪花ID生成器
            </summary>
        </member>
        <member name="T:Virgo.Strings.ValidateCode">
            <summary>
            画验证码
            </summary>
        </member>
        <member name="M:Virgo.Strings.ValidateCode.CreateValidateCode(System.Int32)">
            <summary>
            生成验证码
            </summary>
            <param name="length">指定验证码的长度</param>
            <returns>验证码字符串</returns>
        </member>
        <member name="M:Virgo.Strings.ValidateCode.CreateValidateGraphic(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Int32,System.Int32)">
            <summary>
            创建验证码的图片
            </summary>
            <example><img id="imgVerify" src="/ValidateCode" alt="看不清？点击更换" onclick="this.src = this.src+'?'" style="vertical-align:middle;" /></example>
            <param name="validateCode">验证码序列</param>
            <param name="context">当前的HttpContext上下文对象</param>
            <param name="fontSize">字体大小，默认值22px</param>
            <param name="lineHeight">行高，默认36px</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
        </member>
        <member name="T:Virgo.Systems.CallContext`1">
            <summary>
            取线程内唯一对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Virgo.Systems.CallContext`1.SetData(System.String,`0)">
            <summary>
            设置值
            </summary>
            <param name="name"></param>
            <param name="data"></param>
        </member>
        <member name="M:Virgo.Systems.CallContext`1.GetData(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Systems.ConcurrentLimitedQueue`1">
            <summary>
            定长队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Virgo.Systems.ConcurrentLimitedQueue`1.Limit">
            <summary>
            长度
            </summary>
        </member>
        <member name="M:Virgo.Systems.ConcurrentLimitedQueue`1.#ctor(System.Int32)">
            <summary>
            定长队列
            </summary>
            <param name="limit"></param>
        </member>
        <member name="M:Virgo.Systems.ConcurrentLimitedQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            定长队列
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Virgo.Systems.ConcurrentLimitedQueue`1.Enqueue(`0)">
            <summary>
            入队
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Virgo.Systems.Disposable">
            <summary>
            Disposable
            </summary>
        </member>
        <member name="M:Virgo.Systems.Disposable.Finalize">
            <summary>
            终结器
            </summary>
        </member>
        <member name="M:Virgo.Systems.Disposable.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Virgo.Systems.Disposable.Dispose(System.Boolean)">
            <summary>
            释放
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Virgo.Systems.HiPerfTimer">
            <summary>
            纳秒级计时器
            </summary>
        </member>
        <member name="M:Virgo.Systems.HiPerfTimer.#ctor">
            <summary>
            纳秒计数器
            </summary>
        </member>
        <member name="M:Virgo.Systems.HiPerfTimer.Start">
            <summary>
            开始计时器
            </summary>
        </member>
        <member name="M:Virgo.Systems.HiPerfTimer.StartNew">
            <summary>
            启动一个新的计时器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Systems.HiPerfTimer.Stop">
            <summary>
            停止计时器
            </summary>
        </member>
        <member name="P:Virgo.Systems.HiPerfTimer.Duration">
            <summary>
            时器经过时间(单位：秒)
            </summary>
        </member>
        <member name="M:Virgo.Systems.HiPerfTimer.Execute(System.Action)">
            <summary>
            执行一个方法并测试执行时间
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Systems.LimitedQueue`1">
            <summary>
            定长队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Virgo.Systems.LimitedQueue`1.Limit">
            <summary>
            队列长度
            </summary>
        </member>
        <member name="M:Virgo.Systems.LimitedQueue`1.#ctor(System.Int32)">
            <summary>
            定长队列
            </summary>
            <param name="limit"></param>
        </member>
        <member name="M:Virgo.Systems.LimitedQueue`1.Enqueue(`0)">
            <summary>
            入队
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Virgo.Text.StringCompute">
            <summary>
            字符串相似度辅助类
            <see cref="M:Virgo.Text.StringCompute.SpeedyCompute"/>计算相似度， 不记录比较时间
            <see cref="M:Virgo.Text.StringCompute.Compute"/>计算相似度， 记录比较时间
            </summary>
        </member>
        <member name="F:Virgo.Text.StringCompute._ArrChar1">
            <summary>
            字符串1
            </summary>
        </member>
        <member name="F:Virgo.Text.StringCompute._ArrChar2">
            <summary>
            字符串2
            </summary>
        </member>
        <member name="F:Virgo.Text.StringCompute._Result">
            <summary>
            统计结果
            </summary>
        </member>
        <member name="F:Virgo.Text.StringCompute._BeginTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="F:Virgo.Text.StringCompute._EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="F:Virgo.Text.StringCompute._ComputeTimes">
            <summary>
            计算次数
            </summary>
        </member>
        <member name="F:Virgo.Text.StringCompute._Matrix">
            <summary>
            算法矩阵
            </summary>
        </member>
        <member name="F:Virgo.Text.StringCompute._Column">
            <summary>
            矩阵列数
            </summary>
        </member>
        <member name="F:Virgo.Text.StringCompute._Row">
            <summary>
            矩阵行数
            </summary>
        </member>
        <member name="M:Virgo.Text.StringCompute.StringComputeInit(System.String,System.String)">
            <summary>
            初始化算法基本信息
            </summary>
            <param name="str1">字符串1</param>
            <param name="str2">字符串2</param>
        </member>
        <member name="M:Virgo.Text.StringCompute.Compute">
            <summary>
            计算相似度
            </summary>
        </member>
        <member name="M:Virgo.Text.StringCompute.SpeedyCompute">
            <summary>
            计算相似度（不记录比较时间）
            </summary>
        </member>
        <member name="M:Virgo.Text.StringCompute.Compute(System.String,System.String)">
            <summary>
            计算相似度
            </summary>
            <param name="str1">字符串1</param>
            <param name="str2">字符串2</param>
        </member>
        <member name="M:Virgo.Text.StringCompute.SpeedyCompute(System.String,System.String)">
            <summary>
            计算相似度
            </summary>
            <param name="str1">字符串1</param>
            <param name="str2">字符串2</param>
        </member>
        <member name="M:Virgo.Text.StringCompute.InitMatrix">
            <summary>
            初始化矩阵的第一行和第一列
            </summary>
        </member>
        <member name="M:Virgo.Text.StringCompute.Minimum(System.Int32,System.Int32,System.Int32)">
            <summary>
            取三个数中的最小值
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
            <param name="Third"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Text.StringComputeResult">
            <summary>
            计算结果
            </summary>
        </member>
        <member name="F:Virgo.Text.StringComputeResult.Rate">
            <summary>
            相似度（完全匹配相似度为1）
            </summary>
        </member>
        <member name="F:Virgo.Text.StringComputeResult.ComputeTimes">
            <summary>
            对比次数
            </summary>
        </member>
        <member name="F:Virgo.Text.StringComputeResult.UseTime">
            <summary>
            使用时间
            </summary>
        </member>
        <member name="F:Virgo.Text.StringComputeResult.Difference">
            <summary>
            差异
            </summary>
        </member>
        <member name="T:Virgo.Text.StringHelper">
            <summary>
            字符串帮助类
            </summary>
        </member>
        <member name="M:Virgo.Text.StringHelper.ConvertToSbc(System.String)">
            <summary>
            转全角的函数(SBC case)
            </summary>
            <param name="text">任意字符串</param>
            <returns>全角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="M:Virgo.Text.StringHelper.ConvertToDbc(System.String)">
            <summary> 转半角的函数(DBC case) </summary>
            <param name="text">任意字符串</param>
            <returns>半角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="M:Virgo.Text.StringHelper.StringToUnicode(System.String)">
            <summary>
            字符串转为UniCode码字符串
            </summary>
            <param name="s">需要被转换的字符串</param>
            <returns>UniCode码字符串</returns>
        </member>
        <member name="M:Virgo.Text.StringHelper.UnicodeToString(System.String)">
            <summary>
            Unicode字符串转为正常字符串
            </summary>
            <param name="srcText">UniCode码字符串</param>
            <returns>正常字符串</returns>
        </member>
        <member name="M:Virgo.Text.StringHelper.ConvertToTraditional(System.String)">
            <summary>
            将字符串转换为繁体
            </summary>
            <param name="text">需要转的简体中文文本</param>
            <returns>繁体中文结果</returns>
        </member>
        <member name="M:Virgo.Text.StringHelper.ConvertToSimplified(System.String)">
            <summary>
            将字符串转换为简体
            </summary>
            <param name="text">需要转的繁体中文文本</param>
            <returns>简体中文结果</returns>
        </member>
        <member name="T:Virgo.Validator.ComplexPasswordAttribute">
            <summary>
            强密码验证
            </summary>
        </member>
        <member name="M:Virgo.Validator.ComplexPasswordAttribute.IsValid(System.Object)">
            <summary>
            校验密码强度
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Validator.MaxValueAttribute">
            <summary>
            最大值校验
            </summary>
        </member>
        <member name="M:Virgo.Validator.MaxValueAttribute.#ctor(System.Double)">
            <summary>
            最大值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Virgo.Validator.MaxValueAttribute.IsValid(System.Object)">
            <summary>
            最大值校验
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Validator.MaxValueAttribute.FormatErrorMessage(System.String)">
            <summary>Applies formatting to an error message, based on the data field where the error occurred.</summary>
            <param name="name">The name to include in the formatted message.</param>
            <returns>An instance of the formatted error message.</returns>
        </member>
        <member name="T:Virgo.Validator.MinValueAttribute">
            <summary>
            最小值校验
            </summary>
        </member>
        <member name="M:Virgo.Validator.MinValueAttribute.#ctor(System.Double)">
            <summary>
            最小值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Virgo.Validator.MinValueAttribute.IsValid(System.Object)">
            <summary>
            最小值校验
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Virgo.Validator.MinValueAttribute.FormatErrorMessage(System.String)">
            <summary>Applies formatting to an error message, based on the data field where the error occurred.</summary>
            <param name="name">The name to include in the formatted message.</param>
            <returns>An instance of the formatted error message.</returns>
        </member>
        <member name="T:Virgo.VirgoExtensions">
            <summary>
            Virgo拓展类
            </summary>
        </member>
        <member name="M:Virgo.VirgoExtensions.UseVirgo(Autofac.ContainerBuilder)">
            <summary>
            注入Virgo
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Virgo.Win32.Windows">
            <summary>
            Windows系统的系列方法
            </summary>
        </member>
        <member name="M:Virgo.Win32.Windows.GetLocalUsedIP">
            <summary>  
            获取当前使用的IP  
            </summary>  
            <returns></returns>  
        </member>
        <member name="M:Virgo.Win32.Windows.RunApp(System.String,System.String,System.Boolean)">
            <summary>  
            运行一个控制台程序并返回其输出参数。  
            </summary>  
            <param name="filename">程序名</param>  
            <param name="arguments">输入参数</param>
            <param name="recordLog">是否在控制台输出日志</param>
            <returns></returns>  
        </member>
        <member name="T:Virgo.Win32.WindowsServer">
            <summary>
            服务器信息
            </summary>
        </member>
        <member name="F:Virgo.Win32.WindowsServer.CpuId">
            <summary>
            CPUID
            </summary>
        </member>
        <member name="F:Virgo.Win32.WindowsServer.CpuCount">
            <summary>
            CPU插槽数
            </summary>
        </member>
        <member name="F:Virgo.Win32.WindowsServer.CpuMhz">
            <summary>
            CPU主频
            </summary>
        </member>
        <member name="F:Virgo.Win32.WindowsServer.MacAddress">
            <summary>
            mac地址
            </summary>
        </member>
        <member name="F:Virgo.Win32.WindowsServer.DiskId">
            <summary>
            硬盘ID
            </summary>
        </member>
        <member name="F:Virgo.Win32.WindowsServer.DiskSize">
            <summary>
            硬盘大小
            </summary>
        </member>
        <member name="F:Virgo.Win32.WindowsServer.IpAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="F:Virgo.Win32.WindowsServer.LoginUserName">
            <summary>
            系统当前登录用户
            </summary>
        </member>
        <member name="F:Virgo.Win32.WindowsServer.ComputerName">
            <summary>
            计算机名
            </summary>
        </member>
        <member name="F:Virgo.Win32.WindowsServer.SystemType">
            <summary>
            操作系统架构
            </summary>
        </member>
        <member name="F:Virgo.Win32.WindowsServer.TotalPhysicalMemory">
            <summary>
            物理内存，单位MB
            </summary>
        </member>
        <member name="P:Virgo.Win32.WindowsServer.Instance">
            <summary>
            获取实例
            </summary>
        </member>
        <member name="M:Virgo.Win32.WindowsServer.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Virgo.Win32.WindowsServer.GetCpuCount">
            <summary>
            获取CPU个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Win32.WindowsServer.GetCpuMHZ">
            <summary>
            获取CPU主频
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Win32.WindowsServer.GetSizeOfDisk">
            <summary>
            获取磁盘大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:Virgo.Win32.WindowsServer.GetUserName">
               <summary>  
              操作系统的登录用户名 
               </summary>  
               <returns>  </returns>  
        </member>
        <member name="T:Virgo.Win32.WindowsCommand">
            <summary>
            命令提示符
            </summary>
        </member>
        <member name="M:Virgo.Win32.WindowsCommand.Execute(System.Int32,System.String[])">
            <summary>
            执行一个控制台程序，并获取在控制台返回的数据
            </summary>
            <param name="dosCommand">dos/cmd命令</param>
            <param name="outtime">等待执行时间毫秒值，默认不等待</param>
            <returns>控制台输出信息</returns>
            <exception cref="T:System.SystemException">尚未设置进程 <see cref="P:System.Diagnostics.Process.Id" />，而且不存在可从其确定 <see cref="P:System.Diagnostics.Process.Id" /> 属性的 <see cref="P:System.Diagnostics.Process.Handle" />。- 或 -没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。- 或 -您正尝试为远程计算机上运行的进程调用 <see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />。此方法仅对本地计算机上运行的进程可用。</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">未能访问该等待设置。</exception>
            <exception cref="T:System.Exception">命令参数无效，必须传入一个控制台能被cmd.exe可执行程序; 如：ping 127.0.0.1</exception>
        </member>
        <member name="M:Virgo.Win32.WindowsCommand.ExecuteAsync(System.String[])">
            <summary>
            执行CMD命令
            </summary>
            <param name="dosCommand">CMD执行命令</param>
            <returns>命令执行结果</returns>
        </member>
    </members>
</doc>
